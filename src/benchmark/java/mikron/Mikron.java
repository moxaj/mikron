// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mikron.proto

package mikron;

public final class Mikron {
  private Mikron() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DoublesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Doubles)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated double doubles = 1;</code>
     */
    java.util.List<java.lang.Double> getDoublesList();
    /**
     * <code>repeated double doubles = 1;</code>
     */
    int getDoublesCount();
    /**
     * <code>repeated double doubles = 1;</code>
     */
    double getDoubles(int index);
  }
  /**
   * Protobuf type {@code Doubles}
   */
  public  static final class Doubles extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Doubles)
      DoublesOrBuilder {
    // Use Doubles.newBuilder() to construct.
    private Doubles(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Doubles() {
      doubles_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Doubles(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                doubles_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000001;
              }
              doubles_.add(input.readDouble());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                doubles_ = new java.util.ArrayList<java.lang.Double>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                doubles_.add(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          doubles_ = java.util.Collections.unmodifiableList(doubles_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_Doubles_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_Doubles_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.Doubles.class, mikron.Mikron.Doubles.Builder.class);
    }

    public static final int DOUBLES_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Double> doubles_;
    /**
     * <code>repeated double doubles = 1;</code>
     */
    public java.util.List<java.lang.Double>
        getDoublesList() {
      return doubles_;
    }
    /**
     * <code>repeated double doubles = 1;</code>
     */
    public int getDoublesCount() {
      return doubles_.size();
    }
    /**
     * <code>repeated double doubles = 1;</code>
     */
    public double getDoubles(int index) {
      return doubles_.get(index);
    }
    private int doublesMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getDoublesList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(doublesMemoizedSerializedSize);
      }
      for (int i = 0; i < doubles_.size(); i++) {
        output.writeDoubleNoTag(doubles_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getDoublesList().size();
        size += dataSize;
        if (!getDoublesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doublesMemoizedSerializedSize = dataSize;
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.Doubles)) {
        return super.equals(obj);
      }
      mikron.Mikron.Doubles other = (mikron.Mikron.Doubles) obj;

      boolean result = true;
      result = result && getDoublesList()
          .equals(other.getDoublesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getDoublesCount() > 0) {
        hash = (37 * hash) + DOUBLES_FIELD_NUMBER;
        hash = (53 * hash) + getDoublesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.Doubles parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Doubles parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Doubles parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Doubles parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Doubles parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Doubles parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Doubles parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Doubles parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Doubles parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Doubles parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.Doubles prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Doubles}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Doubles)
        mikron.Mikron.DoublesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_Doubles_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_Doubles_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.Doubles.class, mikron.Mikron.Doubles.Builder.class);
      }

      // Construct using mikron.Mikron.Doubles.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        doubles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_Doubles_descriptor;
      }

      public mikron.Mikron.Doubles getDefaultInstanceForType() {
        return mikron.Mikron.Doubles.getDefaultInstance();
      }

      public mikron.Mikron.Doubles build() {
        mikron.Mikron.Doubles result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.Doubles buildPartial() {
        mikron.Mikron.Doubles result = new mikron.Mikron.Doubles(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          doubles_ = java.util.Collections.unmodifiableList(doubles_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.doubles_ = doubles_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.Doubles) {
          return mergeFrom((mikron.Mikron.Doubles)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.Doubles other) {
        if (other == mikron.Mikron.Doubles.getDefaultInstance()) return this;
        if (!other.doubles_.isEmpty()) {
          if (doubles_.isEmpty()) {
            doubles_ = other.doubles_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureDoublesIsMutable();
            doubles_.addAll(other.doubles_);
          }
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.Doubles parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.Doubles) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<java.lang.Double> doubles_ = java.util.Collections.emptyList();
      private void ensureDoublesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          doubles_ = new java.util.ArrayList<java.lang.Double>(doubles_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated double doubles = 1;</code>
       */
      public java.util.List<java.lang.Double>
          getDoublesList() {
        return java.util.Collections.unmodifiableList(doubles_);
      }
      /**
       * <code>repeated double doubles = 1;</code>
       */
      public int getDoublesCount() {
        return doubles_.size();
      }
      /**
       * <code>repeated double doubles = 1;</code>
       */
      public double getDoubles(int index) {
        return doubles_.get(index);
      }
      /**
       * <code>repeated double doubles = 1;</code>
       */
      public Builder setDoubles(
          int index, double value) {
        ensureDoublesIsMutable();
        doubles_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubles = 1;</code>
       */
      public Builder addDoubles(double value) {
        ensureDoublesIsMutable();
        doubles_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubles = 1;</code>
       */
      public Builder addAllDoubles(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoublesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, doubles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubles = 1;</code>
       */
      public Builder clearDoubles() {
        doubles_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:Doubles)
    }

    // @@protoc_insertion_point(class_scope:Doubles)
    private static final mikron.Mikron.Doubles DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.Doubles();
    }

    public static mikron.Mikron.Doubles getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Doubles>
        PARSER = new com.google.protobuf.AbstractParser<Doubles>() {
      public Doubles parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Doubles(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Doubles> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Doubles> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.Doubles getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PersonOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Person)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional string firstName = 1;</code>
     */
    java.lang.String getFirstName();
    /**
     * <code>optional string firstName = 1;</code>
     */
    com.google.protobuf.ByteString
        getFirstNameBytes();

    /**
     * <code>optional string lastName = 2;</code>
     */
    java.lang.String getLastName();
    /**
     * <code>optional string lastName = 2;</code>
     */
    com.google.protobuf.ByteString
        getLastNameBytes();
  }
  /**
   * Protobuf type {@code Person}
   */
  public  static final class Person extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Person)
      PersonOrBuilder {
    // Use Person.newBuilder() to construct.
    private Person(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Person() {
      firstName_ = "";
      lastName_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Person(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              firstName_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              lastName_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_Person_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_Person_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.Person.class, mikron.Mikron.Person.Builder.class);
    }

    public static final int FIRSTNAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object firstName_;
    /**
     * <code>optional string firstName = 1;</code>
     */
    public java.lang.String getFirstName() {
      java.lang.Object ref = firstName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        firstName_ = s;
        return s;
      }
    }
    /**
     * <code>optional string firstName = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFirstNameBytes() {
      java.lang.Object ref = firstName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        firstName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LASTNAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object lastName_;
    /**
     * <code>optional string lastName = 2;</code>
     */
    public java.lang.String getLastName() {
      java.lang.Object ref = lastName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        lastName_ = s;
        return s;
      }
    }
    /**
     * <code>optional string lastName = 2;</code>
     */
    public com.google.protobuf.ByteString
        getLastNameBytes() {
      java.lang.Object ref = lastName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        lastName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getFirstNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, firstName_);
      }
      if (!getLastNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, lastName_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getFirstNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, firstName_);
      }
      if (!getLastNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, lastName_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.Person)) {
        return super.equals(obj);
      }
      mikron.Mikron.Person other = (mikron.Mikron.Person) obj;

      boolean result = true;
      result = result && getFirstName()
          .equals(other.getFirstName());
      result = result && getLastName()
          .equals(other.getLastName());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + FIRSTNAME_FIELD_NUMBER;
      hash = (53 * hash) + getFirstName().hashCode();
      hash = (37 * hash) + LASTNAME_FIELD_NUMBER;
      hash = (53 * hash) + getLastName().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.Person parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Person parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Person parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Person parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Person parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Person parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Person parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Person parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Person parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Person parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.Person prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Person}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Person)
        mikron.Mikron.PersonOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_Person_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_Person_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.Person.class, mikron.Mikron.Person.Builder.class);
      }

      // Construct using mikron.Mikron.Person.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        firstName_ = "";

        lastName_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_Person_descriptor;
      }

      public mikron.Mikron.Person getDefaultInstanceForType() {
        return mikron.Mikron.Person.getDefaultInstance();
      }

      public mikron.Mikron.Person build() {
        mikron.Mikron.Person result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.Person buildPartial() {
        mikron.Mikron.Person result = new mikron.Mikron.Person(this);
        result.firstName_ = firstName_;
        result.lastName_ = lastName_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.Person) {
          return mergeFrom((mikron.Mikron.Person)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.Person other) {
        if (other == mikron.Mikron.Person.getDefaultInstance()) return this;
        if (!other.getFirstName().isEmpty()) {
          firstName_ = other.firstName_;
          onChanged();
        }
        if (!other.getLastName().isEmpty()) {
          lastName_ = other.lastName_;
          onChanged();
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.Person parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.Person) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object firstName_ = "";
      /**
       * <code>optional string firstName = 1;</code>
       */
      public java.lang.String getFirstName() {
        java.lang.Object ref = firstName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          firstName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string firstName = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFirstNameBytes() {
        java.lang.Object ref = firstName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          firstName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string firstName = 1;</code>
       */
      public Builder setFirstName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        firstName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string firstName = 1;</code>
       */
      public Builder clearFirstName() {
        
        firstName_ = getDefaultInstance().getFirstName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string firstName = 1;</code>
       */
      public Builder setFirstNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        firstName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object lastName_ = "";
      /**
       * <code>optional string lastName = 2;</code>
       */
      public java.lang.String getLastName() {
        java.lang.Object ref = lastName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          lastName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lastName = 2;</code>
       */
      public com.google.protobuf.ByteString
          getLastNameBytes() {
        java.lang.Object ref = lastName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          lastName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lastName = 2;</code>
       */
      public Builder setLastName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        lastName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lastName = 2;</code>
       */
      public Builder clearLastName() {
        
        lastName_ = getDefaultInstance().getLastName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lastName = 2;</code>
       */
      public Builder setLastNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        lastName_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:Person)
    }

    // @@protoc_insertion_point(class_scope:Person)
    private static final mikron.Mikron.Person DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.Person();
    }

    public static mikron.Mikron.Person getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Person>
        PARSER = new com.google.protobuf.AbstractParser<Person>() {
      public Person parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Person(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Person> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Person> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.Person getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QuartetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Quartet)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .Person p1 = 1;</code>
     */
    boolean hasP1();
    /**
     * <code>optional .Person p1 = 1;</code>
     */
    mikron.Mikron.Person getP1();
    /**
     * <code>optional .Person p1 = 1;</code>
     */
    mikron.Mikron.PersonOrBuilder getP1OrBuilder();

    /**
     * <code>optional .Person p2 = 2;</code>
     */
    boolean hasP2();
    /**
     * <code>optional .Person p2 = 2;</code>
     */
    mikron.Mikron.Person getP2();
    /**
     * <code>optional .Person p2 = 2;</code>
     */
    mikron.Mikron.PersonOrBuilder getP2OrBuilder();

    /**
     * <code>optional .Person p3 = 3;</code>
     */
    boolean hasP3();
    /**
     * <code>optional .Person p3 = 3;</code>
     */
    mikron.Mikron.Person getP3();
    /**
     * <code>optional .Person p3 = 3;</code>
     */
    mikron.Mikron.PersonOrBuilder getP3OrBuilder();

    /**
     * <code>optional .Person p4 = 4;</code>
     */
    boolean hasP4();
    /**
     * <code>optional .Person p4 = 4;</code>
     */
    mikron.Mikron.Person getP4();
    /**
     * <code>optional .Person p4 = 4;</code>
     */
    mikron.Mikron.PersonOrBuilder getP4OrBuilder();
  }
  /**
   * Protobuf type {@code Quartet}
   */
  public  static final class Quartet extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Quartet)
      QuartetOrBuilder {
    // Use Quartet.newBuilder() to construct.
    private Quartet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Quartet() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Quartet(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              mikron.Mikron.Person.Builder subBuilder = null;
              if (p1_ != null) {
                subBuilder = p1_.toBuilder();
              }
              p1_ = input.readMessage(mikron.Mikron.Person.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(p1_);
                p1_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              mikron.Mikron.Person.Builder subBuilder = null;
              if (p2_ != null) {
                subBuilder = p2_.toBuilder();
              }
              p2_ = input.readMessage(mikron.Mikron.Person.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(p2_);
                p2_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              mikron.Mikron.Person.Builder subBuilder = null;
              if (p3_ != null) {
                subBuilder = p3_.toBuilder();
              }
              p3_ = input.readMessage(mikron.Mikron.Person.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(p3_);
                p3_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              mikron.Mikron.Person.Builder subBuilder = null;
              if (p4_ != null) {
                subBuilder = p4_.toBuilder();
              }
              p4_ = input.readMessage(mikron.Mikron.Person.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(p4_);
                p4_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_Quartet_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_Quartet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.Quartet.class, mikron.Mikron.Quartet.Builder.class);
    }

    public static final int P1_FIELD_NUMBER = 1;
    private mikron.Mikron.Person p1_;
    /**
     * <code>optional .Person p1 = 1;</code>
     */
    public boolean hasP1() {
      return p1_ != null;
    }
    /**
     * <code>optional .Person p1 = 1;</code>
     */
    public mikron.Mikron.Person getP1() {
      return p1_ == null ? mikron.Mikron.Person.getDefaultInstance() : p1_;
    }
    /**
     * <code>optional .Person p1 = 1;</code>
     */
    public mikron.Mikron.PersonOrBuilder getP1OrBuilder() {
      return getP1();
    }

    public static final int P2_FIELD_NUMBER = 2;
    private mikron.Mikron.Person p2_;
    /**
     * <code>optional .Person p2 = 2;</code>
     */
    public boolean hasP2() {
      return p2_ != null;
    }
    /**
     * <code>optional .Person p2 = 2;</code>
     */
    public mikron.Mikron.Person getP2() {
      return p2_ == null ? mikron.Mikron.Person.getDefaultInstance() : p2_;
    }
    /**
     * <code>optional .Person p2 = 2;</code>
     */
    public mikron.Mikron.PersonOrBuilder getP2OrBuilder() {
      return getP2();
    }

    public static final int P3_FIELD_NUMBER = 3;
    private mikron.Mikron.Person p3_;
    /**
     * <code>optional .Person p3 = 3;</code>
     */
    public boolean hasP3() {
      return p3_ != null;
    }
    /**
     * <code>optional .Person p3 = 3;</code>
     */
    public mikron.Mikron.Person getP3() {
      return p3_ == null ? mikron.Mikron.Person.getDefaultInstance() : p3_;
    }
    /**
     * <code>optional .Person p3 = 3;</code>
     */
    public mikron.Mikron.PersonOrBuilder getP3OrBuilder() {
      return getP3();
    }

    public static final int P4_FIELD_NUMBER = 4;
    private mikron.Mikron.Person p4_;
    /**
     * <code>optional .Person p4 = 4;</code>
     */
    public boolean hasP4() {
      return p4_ != null;
    }
    /**
     * <code>optional .Person p4 = 4;</code>
     */
    public mikron.Mikron.Person getP4() {
      return p4_ == null ? mikron.Mikron.Person.getDefaultInstance() : p4_;
    }
    /**
     * <code>optional .Person p4 = 4;</code>
     */
    public mikron.Mikron.PersonOrBuilder getP4OrBuilder() {
      return getP4();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (p1_ != null) {
        output.writeMessage(1, getP1());
      }
      if (p2_ != null) {
        output.writeMessage(2, getP2());
      }
      if (p3_ != null) {
        output.writeMessage(3, getP3());
      }
      if (p4_ != null) {
        output.writeMessage(4, getP4());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (p1_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getP1());
      }
      if (p2_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getP2());
      }
      if (p3_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getP3());
      }
      if (p4_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getP4());
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.Quartet)) {
        return super.equals(obj);
      }
      mikron.Mikron.Quartet other = (mikron.Mikron.Quartet) obj;

      boolean result = true;
      result = result && (hasP1() == other.hasP1());
      if (hasP1()) {
        result = result && getP1()
            .equals(other.getP1());
      }
      result = result && (hasP2() == other.hasP2());
      if (hasP2()) {
        result = result && getP2()
            .equals(other.getP2());
      }
      result = result && (hasP3() == other.hasP3());
      if (hasP3()) {
        result = result && getP3()
            .equals(other.getP3());
      }
      result = result && (hasP4() == other.hasP4());
      if (hasP4()) {
        result = result && getP4()
            .equals(other.getP4());
      }
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasP1()) {
        hash = (37 * hash) + P1_FIELD_NUMBER;
        hash = (53 * hash) + getP1().hashCode();
      }
      if (hasP2()) {
        hash = (37 * hash) + P2_FIELD_NUMBER;
        hash = (53 * hash) + getP2().hashCode();
      }
      if (hasP3()) {
        hash = (37 * hash) + P3_FIELD_NUMBER;
        hash = (53 * hash) + getP3().hashCode();
      }
      if (hasP4()) {
        hash = (37 * hash) + P4_FIELD_NUMBER;
        hash = (53 * hash) + getP4().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.Quartet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Quartet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Quartet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Quartet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Quartet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Quartet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Quartet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Quartet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Quartet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Quartet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.Quartet prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Quartet}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Quartet)
        mikron.Mikron.QuartetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_Quartet_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_Quartet_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.Quartet.class, mikron.Mikron.Quartet.Builder.class);
      }

      // Construct using mikron.Mikron.Quartet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (p1Builder_ == null) {
          p1_ = null;
        } else {
          p1_ = null;
          p1Builder_ = null;
        }
        if (p2Builder_ == null) {
          p2_ = null;
        } else {
          p2_ = null;
          p2Builder_ = null;
        }
        if (p3Builder_ == null) {
          p3_ = null;
        } else {
          p3_ = null;
          p3Builder_ = null;
        }
        if (p4Builder_ == null) {
          p4_ = null;
        } else {
          p4_ = null;
          p4Builder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_Quartet_descriptor;
      }

      public mikron.Mikron.Quartet getDefaultInstanceForType() {
        return mikron.Mikron.Quartet.getDefaultInstance();
      }

      public mikron.Mikron.Quartet build() {
        mikron.Mikron.Quartet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.Quartet buildPartial() {
        mikron.Mikron.Quartet result = new mikron.Mikron.Quartet(this);
        if (p1Builder_ == null) {
          result.p1_ = p1_;
        } else {
          result.p1_ = p1Builder_.build();
        }
        if (p2Builder_ == null) {
          result.p2_ = p2_;
        } else {
          result.p2_ = p2Builder_.build();
        }
        if (p3Builder_ == null) {
          result.p3_ = p3_;
        } else {
          result.p3_ = p3Builder_.build();
        }
        if (p4Builder_ == null) {
          result.p4_ = p4_;
        } else {
          result.p4_ = p4Builder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.Quartet) {
          return mergeFrom((mikron.Mikron.Quartet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.Quartet other) {
        if (other == mikron.Mikron.Quartet.getDefaultInstance()) return this;
        if (other.hasP1()) {
          mergeP1(other.getP1());
        }
        if (other.hasP2()) {
          mergeP2(other.getP2());
        }
        if (other.hasP3()) {
          mergeP3(other.getP3());
        }
        if (other.hasP4()) {
          mergeP4(other.getP4());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.Quartet parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.Quartet) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private mikron.Mikron.Person p1_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder> p1Builder_;
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      public boolean hasP1() {
        return p1Builder_ != null || p1_ != null;
      }
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      public mikron.Mikron.Person getP1() {
        if (p1Builder_ == null) {
          return p1_ == null ? mikron.Mikron.Person.getDefaultInstance() : p1_;
        } else {
          return p1Builder_.getMessage();
        }
      }
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      public Builder setP1(mikron.Mikron.Person value) {
        if (p1Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          p1_ = value;
          onChanged();
        } else {
          p1Builder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      public Builder setP1(
          mikron.Mikron.Person.Builder builderForValue) {
        if (p1Builder_ == null) {
          p1_ = builderForValue.build();
          onChanged();
        } else {
          p1Builder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      public Builder mergeP1(mikron.Mikron.Person value) {
        if (p1Builder_ == null) {
          if (p1_ != null) {
            p1_ =
              mikron.Mikron.Person.newBuilder(p1_).mergeFrom(value).buildPartial();
          } else {
            p1_ = value;
          }
          onChanged();
        } else {
          p1Builder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      public Builder clearP1() {
        if (p1Builder_ == null) {
          p1_ = null;
          onChanged();
        } else {
          p1_ = null;
          p1Builder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      public mikron.Mikron.Person.Builder getP1Builder() {
        
        onChanged();
        return getP1FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      public mikron.Mikron.PersonOrBuilder getP1OrBuilder() {
        if (p1Builder_ != null) {
          return p1Builder_.getMessageOrBuilder();
        } else {
          return p1_ == null ?
              mikron.Mikron.Person.getDefaultInstance() : p1_;
        }
      }
      /**
       * <code>optional .Person p1 = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder> 
          getP1FieldBuilder() {
        if (p1Builder_ == null) {
          p1Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder>(
                  getP1(),
                  getParentForChildren(),
                  isClean());
          p1_ = null;
        }
        return p1Builder_;
      }

      private mikron.Mikron.Person p2_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder> p2Builder_;
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      public boolean hasP2() {
        return p2Builder_ != null || p2_ != null;
      }
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      public mikron.Mikron.Person getP2() {
        if (p2Builder_ == null) {
          return p2_ == null ? mikron.Mikron.Person.getDefaultInstance() : p2_;
        } else {
          return p2Builder_.getMessage();
        }
      }
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      public Builder setP2(mikron.Mikron.Person value) {
        if (p2Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          p2_ = value;
          onChanged();
        } else {
          p2Builder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      public Builder setP2(
          mikron.Mikron.Person.Builder builderForValue) {
        if (p2Builder_ == null) {
          p2_ = builderForValue.build();
          onChanged();
        } else {
          p2Builder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      public Builder mergeP2(mikron.Mikron.Person value) {
        if (p2Builder_ == null) {
          if (p2_ != null) {
            p2_ =
              mikron.Mikron.Person.newBuilder(p2_).mergeFrom(value).buildPartial();
          } else {
            p2_ = value;
          }
          onChanged();
        } else {
          p2Builder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      public Builder clearP2() {
        if (p2Builder_ == null) {
          p2_ = null;
          onChanged();
        } else {
          p2_ = null;
          p2Builder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      public mikron.Mikron.Person.Builder getP2Builder() {
        
        onChanged();
        return getP2FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      public mikron.Mikron.PersonOrBuilder getP2OrBuilder() {
        if (p2Builder_ != null) {
          return p2Builder_.getMessageOrBuilder();
        } else {
          return p2_ == null ?
              mikron.Mikron.Person.getDefaultInstance() : p2_;
        }
      }
      /**
       * <code>optional .Person p2 = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder> 
          getP2FieldBuilder() {
        if (p2Builder_ == null) {
          p2Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder>(
                  getP2(),
                  getParentForChildren(),
                  isClean());
          p2_ = null;
        }
        return p2Builder_;
      }

      private mikron.Mikron.Person p3_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder> p3Builder_;
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      public boolean hasP3() {
        return p3Builder_ != null || p3_ != null;
      }
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      public mikron.Mikron.Person getP3() {
        if (p3Builder_ == null) {
          return p3_ == null ? mikron.Mikron.Person.getDefaultInstance() : p3_;
        } else {
          return p3Builder_.getMessage();
        }
      }
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      public Builder setP3(mikron.Mikron.Person value) {
        if (p3Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          p3_ = value;
          onChanged();
        } else {
          p3Builder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      public Builder setP3(
          mikron.Mikron.Person.Builder builderForValue) {
        if (p3Builder_ == null) {
          p3_ = builderForValue.build();
          onChanged();
        } else {
          p3Builder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      public Builder mergeP3(mikron.Mikron.Person value) {
        if (p3Builder_ == null) {
          if (p3_ != null) {
            p3_ =
              mikron.Mikron.Person.newBuilder(p3_).mergeFrom(value).buildPartial();
          } else {
            p3_ = value;
          }
          onChanged();
        } else {
          p3Builder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      public Builder clearP3() {
        if (p3Builder_ == null) {
          p3_ = null;
          onChanged();
        } else {
          p3_ = null;
          p3Builder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      public mikron.Mikron.Person.Builder getP3Builder() {
        
        onChanged();
        return getP3FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      public mikron.Mikron.PersonOrBuilder getP3OrBuilder() {
        if (p3Builder_ != null) {
          return p3Builder_.getMessageOrBuilder();
        } else {
          return p3_ == null ?
              mikron.Mikron.Person.getDefaultInstance() : p3_;
        }
      }
      /**
       * <code>optional .Person p3 = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder> 
          getP3FieldBuilder() {
        if (p3Builder_ == null) {
          p3Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder>(
                  getP3(),
                  getParentForChildren(),
                  isClean());
          p3_ = null;
        }
        return p3Builder_;
      }

      private mikron.Mikron.Person p4_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder> p4Builder_;
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      public boolean hasP4() {
        return p4Builder_ != null || p4_ != null;
      }
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      public mikron.Mikron.Person getP4() {
        if (p4Builder_ == null) {
          return p4_ == null ? mikron.Mikron.Person.getDefaultInstance() : p4_;
        } else {
          return p4Builder_.getMessage();
        }
      }
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      public Builder setP4(mikron.Mikron.Person value) {
        if (p4Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          p4_ = value;
          onChanged();
        } else {
          p4Builder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      public Builder setP4(
          mikron.Mikron.Person.Builder builderForValue) {
        if (p4Builder_ == null) {
          p4_ = builderForValue.build();
          onChanged();
        } else {
          p4Builder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      public Builder mergeP4(mikron.Mikron.Person value) {
        if (p4Builder_ == null) {
          if (p4_ != null) {
            p4_ =
              mikron.Mikron.Person.newBuilder(p4_).mergeFrom(value).buildPartial();
          } else {
            p4_ = value;
          }
          onChanged();
        } else {
          p4Builder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      public Builder clearP4() {
        if (p4Builder_ == null) {
          p4_ = null;
          onChanged();
        } else {
          p4_ = null;
          p4Builder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      public mikron.Mikron.Person.Builder getP4Builder() {
        
        onChanged();
        return getP4FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      public mikron.Mikron.PersonOrBuilder getP4OrBuilder() {
        if (p4Builder_ != null) {
          return p4Builder_.getMessageOrBuilder();
        } else {
          return p4_ == null ?
              mikron.Mikron.Person.getDefaultInstance() : p4_;
        }
      }
      /**
       * <code>optional .Person p4 = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder> 
          getP4FieldBuilder() {
        if (p4Builder_ == null) {
          p4Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mikron.Mikron.Person, mikron.Mikron.Person.Builder, mikron.Mikron.PersonOrBuilder>(
                  getP4(),
                  getParentForChildren(),
                  isClean());
          p4_ = null;
        }
        return p4Builder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:Quartet)
    }

    // @@protoc_insertion_point(class_scope:Quartet)
    private static final mikron.Mikron.Quartet DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.Quartet();
    }

    public static mikron.Mikron.Quartet getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Quartet>
        PARSER = new com.google.protobuf.AbstractParser<Quartet>() {
      public Quartet parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Quartet(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Quartet> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Quartet> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.Quartet getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CoordOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Coord)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double x = 1;</code>
     */
    double getX();

    /**
     * <code>optional double y = 2;</code>
     */
    double getY();
  }
  /**
   * Protobuf type {@code Coord}
   */
  public  static final class Coord extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Coord)
      CoordOrBuilder {
    // Use Coord.newBuilder() to construct.
    private Coord(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Coord() {
      x_ = 0D;
      y_ = 0D;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Coord(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 9: {

              x_ = input.readDouble();
              break;
            }
            case 17: {

              y_ = input.readDouble();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_Coord_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_Coord_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.Coord.class, mikron.Mikron.Coord.Builder.class);
    }

    public static final int X_FIELD_NUMBER = 1;
    private double x_;
    /**
     * <code>optional double x = 1;</code>
     */
    public double getX() {
      return x_;
    }

    public static final int Y_FIELD_NUMBER = 2;
    private double y_;
    /**
     * <code>optional double y = 2;</code>
     */
    public double getY() {
      return y_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (x_ != 0D) {
        output.writeDouble(1, x_);
      }
      if (y_ != 0D) {
        output.writeDouble(2, y_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (x_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, x_);
      }
      if (y_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, y_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.Coord)) {
        return super.equals(obj);
      }
      mikron.Mikron.Coord other = (mikron.Mikron.Coord) obj;

      boolean result = true;
      result = result && (
          java.lang.Double.doubleToLongBits(getX())
          == java.lang.Double.doubleToLongBits(
              other.getX()));
      result = result && (
          java.lang.Double.doubleToLongBits(getY())
          == java.lang.Double.doubleToLongBits(
              other.getY()));
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + X_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getX()));
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getY()));
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.Coord parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Coord parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Coord parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Coord parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Coord parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Coord parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Coord parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Coord parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Coord parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Coord parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.Coord prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Coord}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Coord)
        mikron.Mikron.CoordOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_Coord_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_Coord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.Coord.class, mikron.Mikron.Coord.Builder.class);
      }

      // Construct using mikron.Mikron.Coord.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        x_ = 0D;

        y_ = 0D;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_Coord_descriptor;
      }

      public mikron.Mikron.Coord getDefaultInstanceForType() {
        return mikron.Mikron.Coord.getDefaultInstance();
      }

      public mikron.Mikron.Coord build() {
        mikron.Mikron.Coord result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.Coord buildPartial() {
        mikron.Mikron.Coord result = new mikron.Mikron.Coord(this);
        result.x_ = x_;
        result.y_ = y_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.Coord) {
          return mergeFrom((mikron.Mikron.Coord)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.Coord other) {
        if (other == mikron.Mikron.Coord.getDefaultInstance()) return this;
        if (other.getX() != 0D) {
          setX(other.getX());
        }
        if (other.getY() != 0D) {
          setY(other.getY());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.Coord parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.Coord) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double x_ ;
      /**
       * <code>optional double x = 1;</code>
       */
      public double getX() {
        return x_;
      }
      /**
       * <code>optional double x = 1;</code>
       */
      public Builder setX(double value) {
        
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double x = 1;</code>
       */
      public Builder clearX() {
        
        x_ = 0D;
        onChanged();
        return this;
      }

      private double y_ ;
      /**
       * <code>optional double y = 2;</code>
       */
      public double getY() {
        return y_;
      }
      /**
       * <code>optional double y = 2;</code>
       */
      public Builder setY(double value) {
        
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double y = 2;</code>
       */
      public Builder clearY() {
        
        y_ = 0D;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:Coord)
    }

    // @@protoc_insertion_point(class_scope:Coord)
    private static final mikron.Mikron.Coord DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.Coord();
    }

    public static mikron.Mikron.Coord getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Coord>
        PARSER = new com.google.protobuf.AbstractParser<Coord>() {
      public Coord parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Coord(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Coord> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Coord> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.Coord getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FixtureUserDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:FixtureUserData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 color = 1;</code>
     */
    int getColor();
  }
  /**
   * Protobuf type {@code FixtureUserData}
   */
  public  static final class FixtureUserData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:FixtureUserData)
      FixtureUserDataOrBuilder {
    // Use FixtureUserData.newBuilder() to construct.
    private FixtureUserData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FixtureUserData() {
      color_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private FixtureUserData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              color_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_FixtureUserData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_FixtureUserData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.FixtureUserData.class, mikron.Mikron.FixtureUserData.Builder.class);
    }

    public static final int COLOR_FIELD_NUMBER = 1;
    private int color_;
    /**
     * <code>optional int32 color = 1;</code>
     */
    public int getColor() {
      return color_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (color_ != 0) {
        output.writeInt32(1, color_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (color_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, color_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.FixtureUserData)) {
        return super.equals(obj);
      }
      mikron.Mikron.FixtureUserData other = (mikron.Mikron.FixtureUserData) obj;

      boolean result = true;
      result = result && (getColor()
          == other.getColor());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + COLOR_FIELD_NUMBER;
      hash = (53 * hash) + getColor();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.FixtureUserData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.FixtureUserData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.FixtureUserData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.FixtureUserData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.FixtureUserData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.FixtureUserData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.FixtureUserData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.FixtureUserData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.FixtureUserData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.FixtureUserData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.FixtureUserData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code FixtureUserData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:FixtureUserData)
        mikron.Mikron.FixtureUserDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_FixtureUserData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_FixtureUserData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.FixtureUserData.class, mikron.Mikron.FixtureUserData.Builder.class);
      }

      // Construct using mikron.Mikron.FixtureUserData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        color_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_FixtureUserData_descriptor;
      }

      public mikron.Mikron.FixtureUserData getDefaultInstanceForType() {
        return mikron.Mikron.FixtureUserData.getDefaultInstance();
      }

      public mikron.Mikron.FixtureUserData build() {
        mikron.Mikron.FixtureUserData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.FixtureUserData buildPartial() {
        mikron.Mikron.FixtureUserData result = new mikron.Mikron.FixtureUserData(this);
        result.color_ = color_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.FixtureUserData) {
          return mergeFrom((mikron.Mikron.FixtureUserData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.FixtureUserData other) {
        if (other == mikron.Mikron.FixtureUserData.getDefaultInstance()) return this;
        if (other.getColor() != 0) {
          setColor(other.getColor());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.FixtureUserData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.FixtureUserData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int color_ ;
      /**
       * <code>optional int32 color = 1;</code>
       */
      public int getColor() {
        return color_;
      }
      /**
       * <code>optional int32 color = 1;</code>
       */
      public Builder setColor(int value) {
        
        color_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 color = 1;</code>
       */
      public Builder clearColor() {
        
        color_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:FixtureUserData)
    }

    // @@protoc_insertion_point(class_scope:FixtureUserData)
    private static final mikron.Mikron.FixtureUserData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.FixtureUserData();
    }

    public static mikron.Mikron.FixtureUserData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FixtureUserData>
        PARSER = new com.google.protobuf.AbstractParser<FixtureUserData>() {
      public FixtureUserData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new FixtureUserData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FixtureUserData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FixtureUserData> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.FixtureUserData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FixtureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Fixture)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .FixtureUserData userData = 1;</code>
     */
    boolean hasUserData();
    /**
     * <code>optional .FixtureUserData userData = 1;</code>
     */
    mikron.Mikron.FixtureUserData getUserData();
    /**
     * <code>optional .FixtureUserData userData = 1;</code>
     */
    mikron.Mikron.FixtureUserDataOrBuilder getUserDataOrBuilder();

    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    java.util.List<mikron.Mikron.Coord> 
        getCoordsList();
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    mikron.Mikron.Coord getCoords(int index);
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    int getCoordsCount();
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    java.util.List<? extends mikron.Mikron.CoordOrBuilder> 
        getCoordsOrBuilderList();
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    mikron.Mikron.CoordOrBuilder getCoordsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Fixture}
   */
  public  static final class Fixture extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Fixture)
      FixtureOrBuilder {
    // Use Fixture.newBuilder() to construct.
    private Fixture(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Fixture() {
      coords_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Fixture(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              mikron.Mikron.FixtureUserData.Builder subBuilder = null;
              if (userData_ != null) {
                subBuilder = userData_.toBuilder();
              }
              userData_ = input.readMessage(mikron.Mikron.FixtureUserData.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userData_);
                userData_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                coords_ = new java.util.ArrayList<mikron.Mikron.Coord>();
                mutable_bitField0_ |= 0x00000002;
              }
              coords_.add(
                  input.readMessage(mikron.Mikron.Coord.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          coords_ = java.util.Collections.unmodifiableList(coords_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_Fixture_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_Fixture_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.Fixture.class, mikron.Mikron.Fixture.Builder.class);
    }

    private int bitField0_;
    public static final int USERDATA_FIELD_NUMBER = 1;
    private mikron.Mikron.FixtureUserData userData_;
    /**
     * <code>optional .FixtureUserData userData = 1;</code>
     */
    public boolean hasUserData() {
      return userData_ != null;
    }
    /**
     * <code>optional .FixtureUserData userData = 1;</code>
     */
    public mikron.Mikron.FixtureUserData getUserData() {
      return userData_ == null ? mikron.Mikron.FixtureUserData.getDefaultInstance() : userData_;
    }
    /**
     * <code>optional .FixtureUserData userData = 1;</code>
     */
    public mikron.Mikron.FixtureUserDataOrBuilder getUserDataOrBuilder() {
      return getUserData();
    }

    public static final int COORDS_FIELD_NUMBER = 2;
    private java.util.List<mikron.Mikron.Coord> coords_;
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    public java.util.List<mikron.Mikron.Coord> getCoordsList() {
      return coords_;
    }
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    public java.util.List<? extends mikron.Mikron.CoordOrBuilder> 
        getCoordsOrBuilderList() {
      return coords_;
    }
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    public int getCoordsCount() {
      return coords_.size();
    }
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    public mikron.Mikron.Coord getCoords(int index) {
      return coords_.get(index);
    }
    /**
     * <code>repeated .Coord coords = 2;</code>
     */
    public mikron.Mikron.CoordOrBuilder getCoordsOrBuilder(
        int index) {
      return coords_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (userData_ != null) {
        output.writeMessage(1, getUserData());
      }
      for (int i = 0; i < coords_.size(); i++) {
        output.writeMessage(2, coords_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (userData_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getUserData());
      }
      for (int i = 0; i < coords_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, coords_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.Fixture)) {
        return super.equals(obj);
      }
      mikron.Mikron.Fixture other = (mikron.Mikron.Fixture) obj;

      boolean result = true;
      result = result && (hasUserData() == other.hasUserData());
      if (hasUserData()) {
        result = result && getUserData()
            .equals(other.getUserData());
      }
      result = result && getCoordsList()
          .equals(other.getCoordsList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasUserData()) {
        hash = (37 * hash) + USERDATA_FIELD_NUMBER;
        hash = (53 * hash) + getUserData().hashCode();
      }
      if (getCoordsCount() > 0) {
        hash = (37 * hash) + COORDS_FIELD_NUMBER;
        hash = (53 * hash) + getCoordsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.Fixture parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Fixture parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Fixture parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Fixture parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Fixture parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Fixture parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Fixture parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Fixture parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Fixture parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Fixture parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.Fixture prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Fixture}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Fixture)
        mikron.Mikron.FixtureOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_Fixture_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_Fixture_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.Fixture.class, mikron.Mikron.Fixture.Builder.class);
      }

      // Construct using mikron.Mikron.Fixture.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCoordsFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (userDataBuilder_ == null) {
          userData_ = null;
        } else {
          userData_ = null;
          userDataBuilder_ = null;
        }
        if (coordsBuilder_ == null) {
          coords_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          coordsBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_Fixture_descriptor;
      }

      public mikron.Mikron.Fixture getDefaultInstanceForType() {
        return mikron.Mikron.Fixture.getDefaultInstance();
      }

      public mikron.Mikron.Fixture build() {
        mikron.Mikron.Fixture result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.Fixture buildPartial() {
        mikron.Mikron.Fixture result = new mikron.Mikron.Fixture(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (userDataBuilder_ == null) {
          result.userData_ = userData_;
        } else {
          result.userData_ = userDataBuilder_.build();
        }
        if (coordsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            coords_ = java.util.Collections.unmodifiableList(coords_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.coords_ = coords_;
        } else {
          result.coords_ = coordsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.Fixture) {
          return mergeFrom((mikron.Mikron.Fixture)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.Fixture other) {
        if (other == mikron.Mikron.Fixture.getDefaultInstance()) return this;
        if (other.hasUserData()) {
          mergeUserData(other.getUserData());
        }
        if (coordsBuilder_ == null) {
          if (!other.coords_.isEmpty()) {
            if (coords_.isEmpty()) {
              coords_ = other.coords_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureCoordsIsMutable();
              coords_.addAll(other.coords_);
            }
            onChanged();
          }
        } else {
          if (!other.coords_.isEmpty()) {
            if (coordsBuilder_.isEmpty()) {
              coordsBuilder_.dispose();
              coordsBuilder_ = null;
              coords_ = other.coords_;
              bitField0_ = (bitField0_ & ~0x00000002);
              coordsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCoordsFieldBuilder() : null;
            } else {
              coordsBuilder_.addAllMessages(other.coords_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.Fixture parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.Fixture) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private mikron.Mikron.FixtureUserData userData_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.FixtureUserData, mikron.Mikron.FixtureUserData.Builder, mikron.Mikron.FixtureUserDataOrBuilder> userDataBuilder_;
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      public boolean hasUserData() {
        return userDataBuilder_ != null || userData_ != null;
      }
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      public mikron.Mikron.FixtureUserData getUserData() {
        if (userDataBuilder_ == null) {
          return userData_ == null ? mikron.Mikron.FixtureUserData.getDefaultInstance() : userData_;
        } else {
          return userDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      public Builder setUserData(mikron.Mikron.FixtureUserData value) {
        if (userDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userData_ = value;
          onChanged();
        } else {
          userDataBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      public Builder setUserData(
          mikron.Mikron.FixtureUserData.Builder builderForValue) {
        if (userDataBuilder_ == null) {
          userData_ = builderForValue.build();
          onChanged();
        } else {
          userDataBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      public Builder mergeUserData(mikron.Mikron.FixtureUserData value) {
        if (userDataBuilder_ == null) {
          if (userData_ != null) {
            userData_ =
              mikron.Mikron.FixtureUserData.newBuilder(userData_).mergeFrom(value).buildPartial();
          } else {
            userData_ = value;
          }
          onChanged();
        } else {
          userDataBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      public Builder clearUserData() {
        if (userDataBuilder_ == null) {
          userData_ = null;
          onChanged();
        } else {
          userData_ = null;
          userDataBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      public mikron.Mikron.FixtureUserData.Builder getUserDataBuilder() {
        
        onChanged();
        return getUserDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      public mikron.Mikron.FixtureUserDataOrBuilder getUserDataOrBuilder() {
        if (userDataBuilder_ != null) {
          return userDataBuilder_.getMessageOrBuilder();
        } else {
          return userData_ == null ?
              mikron.Mikron.FixtureUserData.getDefaultInstance() : userData_;
        }
      }
      /**
       * <code>optional .FixtureUserData userData = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.FixtureUserData, mikron.Mikron.FixtureUserData.Builder, mikron.Mikron.FixtureUserDataOrBuilder> 
          getUserDataFieldBuilder() {
        if (userDataBuilder_ == null) {
          userDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mikron.Mikron.FixtureUserData, mikron.Mikron.FixtureUserData.Builder, mikron.Mikron.FixtureUserDataOrBuilder>(
                  getUserData(),
                  getParentForChildren(),
                  isClean());
          userData_ = null;
        }
        return userDataBuilder_;
      }

      private java.util.List<mikron.Mikron.Coord> coords_ =
        java.util.Collections.emptyList();
      private void ensureCoordsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          coords_ = new java.util.ArrayList<mikron.Mikron.Coord>(coords_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          mikron.Mikron.Coord, mikron.Mikron.Coord.Builder, mikron.Mikron.CoordOrBuilder> coordsBuilder_;

      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public java.util.List<mikron.Mikron.Coord> getCoordsList() {
        if (coordsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(coords_);
        } else {
          return coordsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public int getCoordsCount() {
        if (coordsBuilder_ == null) {
          return coords_.size();
        } else {
          return coordsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public mikron.Mikron.Coord getCoords(int index) {
        if (coordsBuilder_ == null) {
          return coords_.get(index);
        } else {
          return coordsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder setCoords(
          int index, mikron.Mikron.Coord value) {
        if (coordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoordsIsMutable();
          coords_.set(index, value);
          onChanged();
        } else {
          coordsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder setCoords(
          int index, mikron.Mikron.Coord.Builder builderForValue) {
        if (coordsBuilder_ == null) {
          ensureCoordsIsMutable();
          coords_.set(index, builderForValue.build());
          onChanged();
        } else {
          coordsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder addCoords(mikron.Mikron.Coord value) {
        if (coordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoordsIsMutable();
          coords_.add(value);
          onChanged();
        } else {
          coordsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder addCoords(
          int index, mikron.Mikron.Coord value) {
        if (coordsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoordsIsMutable();
          coords_.add(index, value);
          onChanged();
        } else {
          coordsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder addCoords(
          mikron.Mikron.Coord.Builder builderForValue) {
        if (coordsBuilder_ == null) {
          ensureCoordsIsMutable();
          coords_.add(builderForValue.build());
          onChanged();
        } else {
          coordsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder addCoords(
          int index, mikron.Mikron.Coord.Builder builderForValue) {
        if (coordsBuilder_ == null) {
          ensureCoordsIsMutable();
          coords_.add(index, builderForValue.build());
          onChanged();
        } else {
          coordsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder addAllCoords(
          java.lang.Iterable<? extends mikron.Mikron.Coord> values) {
        if (coordsBuilder_ == null) {
          ensureCoordsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, coords_);
          onChanged();
        } else {
          coordsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder clearCoords() {
        if (coordsBuilder_ == null) {
          coords_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          coordsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public Builder removeCoords(int index) {
        if (coordsBuilder_ == null) {
          ensureCoordsIsMutable();
          coords_.remove(index);
          onChanged();
        } else {
          coordsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public mikron.Mikron.Coord.Builder getCoordsBuilder(
          int index) {
        return getCoordsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public mikron.Mikron.CoordOrBuilder getCoordsOrBuilder(
          int index) {
        if (coordsBuilder_ == null) {
          return coords_.get(index);  } else {
          return coordsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public java.util.List<? extends mikron.Mikron.CoordOrBuilder> 
           getCoordsOrBuilderList() {
        if (coordsBuilder_ != null) {
          return coordsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(coords_);
        }
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public mikron.Mikron.Coord.Builder addCoordsBuilder() {
        return getCoordsFieldBuilder().addBuilder(
            mikron.Mikron.Coord.getDefaultInstance());
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public mikron.Mikron.Coord.Builder addCoordsBuilder(
          int index) {
        return getCoordsFieldBuilder().addBuilder(
            index, mikron.Mikron.Coord.getDefaultInstance());
      }
      /**
       * <code>repeated .Coord coords = 2;</code>
       */
      public java.util.List<mikron.Mikron.Coord.Builder> 
           getCoordsBuilderList() {
        return getCoordsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          mikron.Mikron.Coord, mikron.Mikron.Coord.Builder, mikron.Mikron.CoordOrBuilder> 
          getCoordsFieldBuilder() {
        if (coordsBuilder_ == null) {
          coordsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              mikron.Mikron.Coord, mikron.Mikron.Coord.Builder, mikron.Mikron.CoordOrBuilder>(
                  coords_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          coords_ = null;
        }
        return coordsBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:Fixture)
    }

    // @@protoc_insertion_point(class_scope:Fixture)
    private static final mikron.Mikron.Fixture DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.Fixture();
    }

    public static mikron.Mikron.Fixture getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Fixture>
        PARSER = new com.google.protobuf.AbstractParser<Fixture>() {
      public Fixture parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Fixture(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Fixture> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Fixture> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.Fixture getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BodyUserDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:BodyUserData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 id = 1;</code>
     */
    int getId();
  }
  /**
   * Protobuf type {@code BodyUserData}
   */
  public  static final class BodyUserData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:BodyUserData)
      BodyUserDataOrBuilder {
    // Use BodyUserData.newBuilder() to construct.
    private BodyUserData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BodyUserData() {
      id_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private BodyUserData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              id_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_BodyUserData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_BodyUserData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.BodyUserData.class, mikron.Mikron.BodyUserData.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>optional int32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != 0) {
        output.writeInt32(1, id_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, id_);
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.BodyUserData)) {
        return super.equals(obj);
      }
      mikron.Mikron.BodyUserData other = (mikron.Mikron.BodyUserData) obj;

      boolean result = true;
      result = result && (getId()
          == other.getId());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.BodyUserData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.BodyUserData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.BodyUserData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.BodyUserData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.BodyUserData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.BodyUserData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.BodyUserData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.BodyUserData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.BodyUserData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.BodyUserData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.BodyUserData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code BodyUserData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:BodyUserData)
        mikron.Mikron.BodyUserDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_BodyUserData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_BodyUserData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.BodyUserData.class, mikron.Mikron.BodyUserData.Builder.class);
      }

      // Construct using mikron.Mikron.BodyUserData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        id_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_BodyUserData_descriptor;
      }

      public mikron.Mikron.BodyUserData getDefaultInstanceForType() {
        return mikron.Mikron.BodyUserData.getDefaultInstance();
      }

      public mikron.Mikron.BodyUserData build() {
        mikron.Mikron.BodyUserData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.BodyUserData buildPartial() {
        mikron.Mikron.BodyUserData result = new mikron.Mikron.BodyUserData(this);
        result.id_ = id_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.BodyUserData) {
          return mergeFrom((mikron.Mikron.BodyUserData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.BodyUserData other) {
        if (other == mikron.Mikron.BodyUserData.getDefaultInstance()) return this;
        if (other.getId() != 0) {
          setId(other.getId());
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.BodyUserData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.BodyUserData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int id_ ;
      /**
       * <code>optional int32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>optional int32 id = 1;</code>
       */
      public Builder setId(int value) {
        
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 id = 1;</code>
       */
      public Builder clearId() {
        
        id_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:BodyUserData)
    }

    // @@protoc_insertion_point(class_scope:BodyUserData)
    private static final mikron.Mikron.BodyUserData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.BodyUserData();
    }

    public static mikron.Mikron.BodyUserData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BodyUserData>
        PARSER = new com.google.protobuf.AbstractParser<BodyUserData>() {
      public BodyUserData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new BodyUserData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BodyUserData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BodyUserData> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.BodyUserData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BodyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Body)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .BodyUserData userData = 1;</code>
     */
    boolean hasUserData();
    /**
     * <code>optional .BodyUserData userData = 1;</code>
     */
    mikron.Mikron.BodyUserData getUserData();
    /**
     * <code>optional .BodyUserData userData = 1;</code>
     */
    mikron.Mikron.BodyUserDataOrBuilder getUserDataOrBuilder();

    /**
     * <code>optional .Coord position = 2;</code>
     */
    boolean hasPosition();
    /**
     * <code>optional .Coord position = 2;</code>
     */
    mikron.Mikron.Coord getPosition();
    /**
     * <code>optional .Coord position = 2;</code>
     */
    mikron.Mikron.CoordOrBuilder getPositionOrBuilder();

    /**
     * <code>optional double angle = 3;</code>
     */
    double getAngle();

    /**
     * <code>optional .Body.BodyType bodyType = 4;</code>
     */
    int getBodyTypeValue();
    /**
     * <code>optional .Body.BodyType bodyType = 4;</code>
     */
    mikron.Mikron.Body.BodyType getBodyType();

    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    java.util.List<mikron.Mikron.Fixture> 
        getFixturesList();
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    mikron.Mikron.Fixture getFixtures(int index);
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    int getFixturesCount();
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    java.util.List<? extends mikron.Mikron.FixtureOrBuilder> 
        getFixturesOrBuilderList();
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    mikron.Mikron.FixtureOrBuilder getFixturesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Body}
   */
  public  static final class Body extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Body)
      BodyOrBuilder {
    // Use Body.newBuilder() to construct.
    private Body(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Body() {
      angle_ = 0D;
      bodyType_ = 0;
      fixtures_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Body(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              mikron.Mikron.BodyUserData.Builder subBuilder = null;
              if (userData_ != null) {
                subBuilder = userData_.toBuilder();
              }
              userData_ = input.readMessage(mikron.Mikron.BodyUserData.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(userData_);
                userData_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              mikron.Mikron.Coord.Builder subBuilder = null;
              if (position_ != null) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(mikron.Mikron.Coord.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }

              break;
            }
            case 25: {

              angle_ = input.readDouble();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();

              bodyType_ = rawValue;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                fixtures_ = new java.util.ArrayList<mikron.Mikron.Fixture>();
                mutable_bitField0_ |= 0x00000010;
              }
              fixtures_.add(
                  input.readMessage(mikron.Mikron.Fixture.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          fixtures_ = java.util.Collections.unmodifiableList(fixtures_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_Body_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_Body_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.Body.class, mikron.Mikron.Body.Builder.class);
    }

    /**
     * Protobuf enum {@code Body.BodyType}
     */
    public enum BodyType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DYNAMIC = 0;</code>
       */
      DYNAMIC(0),
      /**
       * <code>STATIC = 1;</code>
       */
      STATIC(1),
      /**
       * <code>KINETIC = 2;</code>
       */
      KINETIC(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>DYNAMIC = 0;</code>
       */
      public static final int DYNAMIC_VALUE = 0;
      /**
       * <code>STATIC = 1;</code>
       */
      public static final int STATIC_VALUE = 1;
      /**
       * <code>KINETIC = 2;</code>
       */
      public static final int KINETIC_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static BodyType valueOf(int value) {
        return forNumber(value);
      }

      public static BodyType forNumber(int value) {
        switch (value) {
          case 0: return DYNAMIC;
          case 1: return STATIC;
          case 2: return KINETIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<BodyType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          BodyType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<BodyType>() {
              public BodyType findValueByNumber(int number) {
                return BodyType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return mikron.Mikron.Body.getDescriptor().getEnumTypes().get(0);
      }

      private static final BodyType[] VALUES = values();

      public static BodyType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private BodyType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:Body.BodyType)
    }

    private int bitField0_;
    public static final int USERDATA_FIELD_NUMBER = 1;
    private mikron.Mikron.BodyUserData userData_;
    /**
     * <code>optional .BodyUserData userData = 1;</code>
     */
    public boolean hasUserData() {
      return userData_ != null;
    }
    /**
     * <code>optional .BodyUserData userData = 1;</code>
     */
    public mikron.Mikron.BodyUserData getUserData() {
      return userData_ == null ? mikron.Mikron.BodyUserData.getDefaultInstance() : userData_;
    }
    /**
     * <code>optional .BodyUserData userData = 1;</code>
     */
    public mikron.Mikron.BodyUserDataOrBuilder getUserDataOrBuilder() {
      return getUserData();
    }

    public static final int POSITION_FIELD_NUMBER = 2;
    private mikron.Mikron.Coord position_;
    /**
     * <code>optional .Coord position = 2;</code>
     */
    public boolean hasPosition() {
      return position_ != null;
    }
    /**
     * <code>optional .Coord position = 2;</code>
     */
    public mikron.Mikron.Coord getPosition() {
      return position_ == null ? mikron.Mikron.Coord.getDefaultInstance() : position_;
    }
    /**
     * <code>optional .Coord position = 2;</code>
     */
    public mikron.Mikron.CoordOrBuilder getPositionOrBuilder() {
      return getPosition();
    }

    public static final int ANGLE_FIELD_NUMBER = 3;
    private double angle_;
    /**
     * <code>optional double angle = 3;</code>
     */
    public double getAngle() {
      return angle_;
    }

    public static final int BODYTYPE_FIELD_NUMBER = 4;
    private int bodyType_;
    /**
     * <code>optional .Body.BodyType bodyType = 4;</code>
     */
    public int getBodyTypeValue() {
      return bodyType_;
    }
    /**
     * <code>optional .Body.BodyType bodyType = 4;</code>
     */
    public mikron.Mikron.Body.BodyType getBodyType() {
      mikron.Mikron.Body.BodyType result = mikron.Mikron.Body.BodyType.valueOf(bodyType_);
      return result == null ? mikron.Mikron.Body.BodyType.UNRECOGNIZED : result;
    }

    public static final int FIXTURES_FIELD_NUMBER = 5;
    private java.util.List<mikron.Mikron.Fixture> fixtures_;
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    public java.util.List<mikron.Mikron.Fixture> getFixturesList() {
      return fixtures_;
    }
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    public java.util.List<? extends mikron.Mikron.FixtureOrBuilder> 
        getFixturesOrBuilderList() {
      return fixtures_;
    }
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    public int getFixturesCount() {
      return fixtures_.size();
    }
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    public mikron.Mikron.Fixture getFixtures(int index) {
      return fixtures_.get(index);
    }
    /**
     * <code>repeated .Fixture fixtures = 5;</code>
     */
    public mikron.Mikron.FixtureOrBuilder getFixturesOrBuilder(
        int index) {
      return fixtures_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (userData_ != null) {
        output.writeMessage(1, getUserData());
      }
      if (position_ != null) {
        output.writeMessage(2, getPosition());
      }
      if (angle_ != 0D) {
        output.writeDouble(3, angle_);
      }
      if (bodyType_ != mikron.Mikron.Body.BodyType.DYNAMIC.getNumber()) {
        output.writeEnum(4, bodyType_);
      }
      for (int i = 0; i < fixtures_.size(); i++) {
        output.writeMessage(5, fixtures_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (userData_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getUserData());
      }
      if (position_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPosition());
      }
      if (angle_ != 0D) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, angle_);
      }
      if (bodyType_ != mikron.Mikron.Body.BodyType.DYNAMIC.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, bodyType_);
      }
      for (int i = 0; i < fixtures_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, fixtures_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.Body)) {
        return super.equals(obj);
      }
      mikron.Mikron.Body other = (mikron.Mikron.Body) obj;

      boolean result = true;
      result = result && (hasUserData() == other.hasUserData());
      if (hasUserData()) {
        result = result && getUserData()
            .equals(other.getUserData());
      }
      result = result && (hasPosition() == other.hasPosition());
      if (hasPosition()) {
        result = result && getPosition()
            .equals(other.getPosition());
      }
      result = result && (
          java.lang.Double.doubleToLongBits(getAngle())
          == java.lang.Double.doubleToLongBits(
              other.getAngle()));
      result = result && bodyType_ == other.bodyType_;
      result = result && getFixturesList()
          .equals(other.getFixturesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasUserData()) {
        hash = (37 * hash) + USERDATA_FIELD_NUMBER;
        hash = (53 * hash) + getUserData().hashCode();
      }
      if (hasPosition()) {
        hash = (37 * hash) + POSITION_FIELD_NUMBER;
        hash = (53 * hash) + getPosition().hashCode();
      }
      hash = (37 * hash) + ANGLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getAngle()));
      hash = (37 * hash) + BODYTYPE_FIELD_NUMBER;
      hash = (53 * hash) + bodyType_;
      if (getFixturesCount() > 0) {
        hash = (37 * hash) + FIXTURES_FIELD_NUMBER;
        hash = (53 * hash) + getFixturesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.Body parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Body parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Body parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Body parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Body parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Body parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Body parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Body parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Body parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Body parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.Body prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Body}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Body)
        mikron.Mikron.BodyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_Body_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_Body_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.Body.class, mikron.Mikron.Body.Builder.class);
      }

      // Construct using mikron.Mikron.Body.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFixturesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (userDataBuilder_ == null) {
          userData_ = null;
        } else {
          userData_ = null;
          userDataBuilder_ = null;
        }
        if (positionBuilder_ == null) {
          position_ = null;
        } else {
          position_ = null;
          positionBuilder_ = null;
        }
        angle_ = 0D;

        bodyType_ = 0;

        if (fixturesBuilder_ == null) {
          fixtures_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          fixturesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_Body_descriptor;
      }

      public mikron.Mikron.Body getDefaultInstanceForType() {
        return mikron.Mikron.Body.getDefaultInstance();
      }

      public mikron.Mikron.Body build() {
        mikron.Mikron.Body result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.Body buildPartial() {
        mikron.Mikron.Body result = new mikron.Mikron.Body(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (userDataBuilder_ == null) {
          result.userData_ = userData_;
        } else {
          result.userData_ = userDataBuilder_.build();
        }
        if (positionBuilder_ == null) {
          result.position_ = position_;
        } else {
          result.position_ = positionBuilder_.build();
        }
        result.angle_ = angle_;
        result.bodyType_ = bodyType_;
        if (fixturesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            fixtures_ = java.util.Collections.unmodifiableList(fixtures_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.fixtures_ = fixtures_;
        } else {
          result.fixtures_ = fixturesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.Body) {
          return mergeFrom((mikron.Mikron.Body)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.Body other) {
        if (other == mikron.Mikron.Body.getDefaultInstance()) return this;
        if (other.hasUserData()) {
          mergeUserData(other.getUserData());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.getAngle() != 0D) {
          setAngle(other.getAngle());
        }
        if (other.bodyType_ != 0) {
          setBodyTypeValue(other.getBodyTypeValue());
        }
        if (fixturesBuilder_ == null) {
          if (!other.fixtures_.isEmpty()) {
            if (fixtures_.isEmpty()) {
              fixtures_ = other.fixtures_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureFixturesIsMutable();
              fixtures_.addAll(other.fixtures_);
            }
            onChanged();
          }
        } else {
          if (!other.fixtures_.isEmpty()) {
            if (fixturesBuilder_.isEmpty()) {
              fixturesBuilder_.dispose();
              fixturesBuilder_ = null;
              fixtures_ = other.fixtures_;
              bitField0_ = (bitField0_ & ~0x00000010);
              fixturesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFixturesFieldBuilder() : null;
            } else {
              fixturesBuilder_.addAllMessages(other.fixtures_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.Body parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.Body) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private mikron.Mikron.BodyUserData userData_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.BodyUserData, mikron.Mikron.BodyUserData.Builder, mikron.Mikron.BodyUserDataOrBuilder> userDataBuilder_;
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      public boolean hasUserData() {
        return userDataBuilder_ != null || userData_ != null;
      }
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      public mikron.Mikron.BodyUserData getUserData() {
        if (userDataBuilder_ == null) {
          return userData_ == null ? mikron.Mikron.BodyUserData.getDefaultInstance() : userData_;
        } else {
          return userDataBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      public Builder setUserData(mikron.Mikron.BodyUserData value) {
        if (userDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          userData_ = value;
          onChanged();
        } else {
          userDataBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      public Builder setUserData(
          mikron.Mikron.BodyUserData.Builder builderForValue) {
        if (userDataBuilder_ == null) {
          userData_ = builderForValue.build();
          onChanged();
        } else {
          userDataBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      public Builder mergeUserData(mikron.Mikron.BodyUserData value) {
        if (userDataBuilder_ == null) {
          if (userData_ != null) {
            userData_ =
              mikron.Mikron.BodyUserData.newBuilder(userData_).mergeFrom(value).buildPartial();
          } else {
            userData_ = value;
          }
          onChanged();
        } else {
          userDataBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      public Builder clearUserData() {
        if (userDataBuilder_ == null) {
          userData_ = null;
          onChanged();
        } else {
          userData_ = null;
          userDataBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      public mikron.Mikron.BodyUserData.Builder getUserDataBuilder() {
        
        onChanged();
        return getUserDataFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      public mikron.Mikron.BodyUserDataOrBuilder getUserDataOrBuilder() {
        if (userDataBuilder_ != null) {
          return userDataBuilder_.getMessageOrBuilder();
        } else {
          return userData_ == null ?
              mikron.Mikron.BodyUserData.getDefaultInstance() : userData_;
        }
      }
      /**
       * <code>optional .BodyUserData userData = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.BodyUserData, mikron.Mikron.BodyUserData.Builder, mikron.Mikron.BodyUserDataOrBuilder> 
          getUserDataFieldBuilder() {
        if (userDataBuilder_ == null) {
          userDataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mikron.Mikron.BodyUserData, mikron.Mikron.BodyUserData.Builder, mikron.Mikron.BodyUserDataOrBuilder>(
                  getUserData(),
                  getParentForChildren(),
                  isClean());
          userData_ = null;
        }
        return userDataBuilder_;
      }

      private mikron.Mikron.Coord position_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Coord, mikron.Mikron.Coord.Builder, mikron.Mikron.CoordOrBuilder> positionBuilder_;
      /**
       * <code>optional .Coord position = 2;</code>
       */
      public boolean hasPosition() {
        return positionBuilder_ != null || position_ != null;
      }
      /**
       * <code>optional .Coord position = 2;</code>
       */
      public mikron.Mikron.Coord getPosition() {
        if (positionBuilder_ == null) {
          return position_ == null ? mikron.Mikron.Coord.getDefaultInstance() : position_;
        } else {
          return positionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .Coord position = 2;</code>
       */
      public Builder setPosition(mikron.Mikron.Coord value) {
        if (positionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          position_ = value;
          onChanged();
        } else {
          positionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>optional .Coord position = 2;</code>
       */
      public Builder setPosition(
          mikron.Mikron.Coord.Builder builderForValue) {
        if (positionBuilder_ == null) {
          position_ = builderForValue.build();
          onChanged();
        } else {
          positionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>optional .Coord position = 2;</code>
       */
      public Builder mergePosition(mikron.Mikron.Coord value) {
        if (positionBuilder_ == null) {
          if (position_ != null) {
            position_ =
              mikron.Mikron.Coord.newBuilder(position_).mergeFrom(value).buildPartial();
          } else {
            position_ = value;
          }
          onChanged();
        } else {
          positionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>optional .Coord position = 2;</code>
       */
      public Builder clearPosition() {
        if (positionBuilder_ == null) {
          position_ = null;
          onChanged();
        } else {
          position_ = null;
          positionBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>optional .Coord position = 2;</code>
       */
      public mikron.Mikron.Coord.Builder getPositionBuilder() {
        
        onChanged();
        return getPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .Coord position = 2;</code>
       */
      public mikron.Mikron.CoordOrBuilder getPositionOrBuilder() {
        if (positionBuilder_ != null) {
          return positionBuilder_.getMessageOrBuilder();
        } else {
          return position_ == null ?
              mikron.Mikron.Coord.getDefaultInstance() : position_;
        }
      }
      /**
       * <code>optional .Coord position = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          mikron.Mikron.Coord, mikron.Mikron.Coord.Builder, mikron.Mikron.CoordOrBuilder> 
          getPositionFieldBuilder() {
        if (positionBuilder_ == null) {
          positionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              mikron.Mikron.Coord, mikron.Mikron.Coord.Builder, mikron.Mikron.CoordOrBuilder>(
                  getPosition(),
                  getParentForChildren(),
                  isClean());
          position_ = null;
        }
        return positionBuilder_;
      }

      private double angle_ ;
      /**
       * <code>optional double angle = 3;</code>
       */
      public double getAngle() {
        return angle_;
      }
      /**
       * <code>optional double angle = 3;</code>
       */
      public Builder setAngle(double value) {
        
        angle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double angle = 3;</code>
       */
      public Builder clearAngle() {
        
        angle_ = 0D;
        onChanged();
        return this;
      }

      private int bodyType_ = 0;
      /**
       * <code>optional .Body.BodyType bodyType = 4;</code>
       */
      public int getBodyTypeValue() {
        return bodyType_;
      }
      /**
       * <code>optional .Body.BodyType bodyType = 4;</code>
       */
      public Builder setBodyTypeValue(int value) {
        bodyType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .Body.BodyType bodyType = 4;</code>
       */
      public mikron.Mikron.Body.BodyType getBodyType() {
        mikron.Mikron.Body.BodyType result = mikron.Mikron.Body.BodyType.valueOf(bodyType_);
        return result == null ? mikron.Mikron.Body.BodyType.UNRECOGNIZED : result;
      }
      /**
       * <code>optional .Body.BodyType bodyType = 4;</code>
       */
      public Builder setBodyType(mikron.Mikron.Body.BodyType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        bodyType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .Body.BodyType bodyType = 4;</code>
       */
      public Builder clearBodyType() {
        
        bodyType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<mikron.Mikron.Fixture> fixtures_ =
        java.util.Collections.emptyList();
      private void ensureFixturesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          fixtures_ = new java.util.ArrayList<mikron.Mikron.Fixture>(fixtures_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          mikron.Mikron.Fixture, mikron.Mikron.Fixture.Builder, mikron.Mikron.FixtureOrBuilder> fixturesBuilder_;

      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public java.util.List<mikron.Mikron.Fixture> getFixturesList() {
        if (fixturesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fixtures_);
        } else {
          return fixturesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public int getFixturesCount() {
        if (fixturesBuilder_ == null) {
          return fixtures_.size();
        } else {
          return fixturesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public mikron.Mikron.Fixture getFixtures(int index) {
        if (fixturesBuilder_ == null) {
          return fixtures_.get(index);
        } else {
          return fixturesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder setFixtures(
          int index, mikron.Mikron.Fixture value) {
        if (fixturesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFixturesIsMutable();
          fixtures_.set(index, value);
          onChanged();
        } else {
          fixturesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder setFixtures(
          int index, mikron.Mikron.Fixture.Builder builderForValue) {
        if (fixturesBuilder_ == null) {
          ensureFixturesIsMutable();
          fixtures_.set(index, builderForValue.build());
          onChanged();
        } else {
          fixturesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder addFixtures(mikron.Mikron.Fixture value) {
        if (fixturesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFixturesIsMutable();
          fixtures_.add(value);
          onChanged();
        } else {
          fixturesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder addFixtures(
          int index, mikron.Mikron.Fixture value) {
        if (fixturesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFixturesIsMutable();
          fixtures_.add(index, value);
          onChanged();
        } else {
          fixturesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder addFixtures(
          mikron.Mikron.Fixture.Builder builderForValue) {
        if (fixturesBuilder_ == null) {
          ensureFixturesIsMutable();
          fixtures_.add(builderForValue.build());
          onChanged();
        } else {
          fixturesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder addFixtures(
          int index, mikron.Mikron.Fixture.Builder builderForValue) {
        if (fixturesBuilder_ == null) {
          ensureFixturesIsMutable();
          fixtures_.add(index, builderForValue.build());
          onChanged();
        } else {
          fixturesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder addAllFixtures(
          java.lang.Iterable<? extends mikron.Mikron.Fixture> values) {
        if (fixturesBuilder_ == null) {
          ensureFixturesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fixtures_);
          onChanged();
        } else {
          fixturesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder clearFixtures() {
        if (fixturesBuilder_ == null) {
          fixtures_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          fixturesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public Builder removeFixtures(int index) {
        if (fixturesBuilder_ == null) {
          ensureFixturesIsMutable();
          fixtures_.remove(index);
          onChanged();
        } else {
          fixturesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public mikron.Mikron.Fixture.Builder getFixturesBuilder(
          int index) {
        return getFixturesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public mikron.Mikron.FixtureOrBuilder getFixturesOrBuilder(
          int index) {
        if (fixturesBuilder_ == null) {
          return fixtures_.get(index);  } else {
          return fixturesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public java.util.List<? extends mikron.Mikron.FixtureOrBuilder> 
           getFixturesOrBuilderList() {
        if (fixturesBuilder_ != null) {
          return fixturesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fixtures_);
        }
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public mikron.Mikron.Fixture.Builder addFixturesBuilder() {
        return getFixturesFieldBuilder().addBuilder(
            mikron.Mikron.Fixture.getDefaultInstance());
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public mikron.Mikron.Fixture.Builder addFixturesBuilder(
          int index) {
        return getFixturesFieldBuilder().addBuilder(
            index, mikron.Mikron.Fixture.getDefaultInstance());
      }
      /**
       * <code>repeated .Fixture fixtures = 5;</code>
       */
      public java.util.List<mikron.Mikron.Fixture.Builder> 
           getFixturesBuilderList() {
        return getFixturesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          mikron.Mikron.Fixture, mikron.Mikron.Fixture.Builder, mikron.Mikron.FixtureOrBuilder> 
          getFixturesFieldBuilder() {
        if (fixturesBuilder_ == null) {
          fixturesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              mikron.Mikron.Fixture, mikron.Mikron.Fixture.Builder, mikron.Mikron.FixtureOrBuilder>(
                  fixtures_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          fixtures_ = null;
        }
        return fixturesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:Body)
    }

    // @@protoc_insertion_point(class_scope:Body)
    private static final mikron.Mikron.Body DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.Body();
    }

    public static mikron.Mikron.Body getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Body>
        PARSER = new com.google.protobuf.AbstractParser<Body>() {
      public Body parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Body(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Body> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Body> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.Body getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SnapshotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Snapshot)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int64 time = 1;</code>
     */
    long getTime();

    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    java.util.List<mikron.Mikron.Body> 
        getBodiesList();
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    mikron.Mikron.Body getBodies(int index);
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    int getBodiesCount();
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    java.util.List<? extends mikron.Mikron.BodyOrBuilder> 
        getBodiesOrBuilderList();
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    mikron.Mikron.BodyOrBuilder getBodiesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Snapshot}
   */
  public  static final class Snapshot extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Snapshot)
      SnapshotOrBuilder {
    // Use Snapshot.newBuilder() to construct.
    private Snapshot(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Snapshot() {
      time_ = 0L;
      bodies_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
    }
    private Snapshot(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!input.skipField(tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              time_ = input.readInt64();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                bodies_ = new java.util.ArrayList<mikron.Mikron.Body>();
                mutable_bitField0_ |= 0x00000002;
              }
              bodies_.add(
                  input.readMessage(mikron.Mikron.Body.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          bodies_ = java.util.Collections.unmodifiableList(bodies_);
        }
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return mikron.Mikron.internal_static_Snapshot_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return mikron.Mikron.internal_static_Snapshot_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              mikron.Mikron.Snapshot.class, mikron.Mikron.Snapshot.Builder.class);
    }

    private int bitField0_;
    public static final int TIME_FIELD_NUMBER = 1;
    private long time_;
    /**
     * <code>optional int64 time = 1;</code>
     */
    public long getTime() {
      return time_;
    }

    public static final int BODIES_FIELD_NUMBER = 2;
    private java.util.List<mikron.Mikron.Body> bodies_;
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    public java.util.List<mikron.Mikron.Body> getBodiesList() {
      return bodies_;
    }
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    public java.util.List<? extends mikron.Mikron.BodyOrBuilder> 
        getBodiesOrBuilderList() {
      return bodies_;
    }
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    public int getBodiesCount() {
      return bodies_.size();
    }
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    public mikron.Mikron.Body getBodies(int index) {
      return bodies_.get(index);
    }
    /**
     * <code>repeated .Body bodies = 2;</code>
     */
    public mikron.Mikron.BodyOrBuilder getBodiesOrBuilder(
        int index) {
      return bodies_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (time_ != 0L) {
        output.writeInt64(1, time_);
      }
      for (int i = 0; i < bodies_.size(); i++) {
        output.writeMessage(2, bodies_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (time_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, time_);
      }
      for (int i = 0; i < bodies_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, bodies_.get(i));
      }
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof mikron.Mikron.Snapshot)) {
        return super.equals(obj);
      }
      mikron.Mikron.Snapshot other = (mikron.Mikron.Snapshot) obj;

      boolean result = true;
      result = result && (getTime()
          == other.getTime());
      result = result && getBodiesList()
          .equals(other.getBodiesList());
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (37 * hash) + TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTime());
      if (getBodiesCount() > 0) {
        hash = (37 * hash) + BODIES_FIELD_NUMBER;
        hash = (53 * hash) + getBodiesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static mikron.Mikron.Snapshot parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Snapshot parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Snapshot parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static mikron.Mikron.Snapshot parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static mikron.Mikron.Snapshot parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Snapshot parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Snapshot parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Snapshot parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static mikron.Mikron.Snapshot parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static mikron.Mikron.Snapshot parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(mikron.Mikron.Snapshot prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Snapshot}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Snapshot)
        mikron.Mikron.SnapshotOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return mikron.Mikron.internal_static_Snapshot_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return mikron.Mikron.internal_static_Snapshot_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                mikron.Mikron.Snapshot.class, mikron.Mikron.Snapshot.Builder.class);
      }

      // Construct using mikron.Mikron.Snapshot.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBodiesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        time_ = 0L;

        if (bodiesBuilder_ == null) {
          bodies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          bodiesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return mikron.Mikron.internal_static_Snapshot_descriptor;
      }

      public mikron.Mikron.Snapshot getDefaultInstanceForType() {
        return mikron.Mikron.Snapshot.getDefaultInstance();
      }

      public mikron.Mikron.Snapshot build() {
        mikron.Mikron.Snapshot result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public mikron.Mikron.Snapshot buildPartial() {
        mikron.Mikron.Snapshot result = new mikron.Mikron.Snapshot(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.time_ = time_;
        if (bodiesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            bodies_ = java.util.Collections.unmodifiableList(bodies_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.bodies_ = bodies_;
        } else {
          result.bodies_ = bodiesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof mikron.Mikron.Snapshot) {
          return mergeFrom((mikron.Mikron.Snapshot)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(mikron.Mikron.Snapshot other) {
        if (other == mikron.Mikron.Snapshot.getDefaultInstance()) return this;
        if (other.getTime() != 0L) {
          setTime(other.getTime());
        }
        if (bodiesBuilder_ == null) {
          if (!other.bodies_.isEmpty()) {
            if (bodies_.isEmpty()) {
              bodies_ = other.bodies_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureBodiesIsMutable();
              bodies_.addAll(other.bodies_);
            }
            onChanged();
          }
        } else {
          if (!other.bodies_.isEmpty()) {
            if (bodiesBuilder_.isEmpty()) {
              bodiesBuilder_.dispose();
              bodiesBuilder_ = null;
              bodies_ = other.bodies_;
              bitField0_ = (bitField0_ & ~0x00000002);
              bodiesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBodiesFieldBuilder() : null;
            } else {
              bodiesBuilder_.addAllMessages(other.bodies_);
            }
          }
        }
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        mikron.Mikron.Snapshot parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (mikron.Mikron.Snapshot) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long time_ ;
      /**
       * <code>optional int64 time = 1;</code>
       */
      public long getTime() {
        return time_;
      }
      /**
       * <code>optional int64 time = 1;</code>
       */
      public Builder setTime(long value) {
        
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 time = 1;</code>
       */
      public Builder clearTime() {
        
        time_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<mikron.Mikron.Body> bodies_ =
        java.util.Collections.emptyList();
      private void ensureBodiesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          bodies_ = new java.util.ArrayList<mikron.Mikron.Body>(bodies_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          mikron.Mikron.Body, mikron.Mikron.Body.Builder, mikron.Mikron.BodyOrBuilder> bodiesBuilder_;

      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public java.util.List<mikron.Mikron.Body> getBodiesList() {
        if (bodiesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(bodies_);
        } else {
          return bodiesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public int getBodiesCount() {
        if (bodiesBuilder_ == null) {
          return bodies_.size();
        } else {
          return bodiesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public mikron.Mikron.Body getBodies(int index) {
        if (bodiesBuilder_ == null) {
          return bodies_.get(index);
        } else {
          return bodiesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder setBodies(
          int index, mikron.Mikron.Body value) {
        if (bodiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBodiesIsMutable();
          bodies_.set(index, value);
          onChanged();
        } else {
          bodiesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder setBodies(
          int index, mikron.Mikron.Body.Builder builderForValue) {
        if (bodiesBuilder_ == null) {
          ensureBodiesIsMutable();
          bodies_.set(index, builderForValue.build());
          onChanged();
        } else {
          bodiesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder addBodies(mikron.Mikron.Body value) {
        if (bodiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBodiesIsMutable();
          bodies_.add(value);
          onChanged();
        } else {
          bodiesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder addBodies(
          int index, mikron.Mikron.Body value) {
        if (bodiesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBodiesIsMutable();
          bodies_.add(index, value);
          onChanged();
        } else {
          bodiesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder addBodies(
          mikron.Mikron.Body.Builder builderForValue) {
        if (bodiesBuilder_ == null) {
          ensureBodiesIsMutable();
          bodies_.add(builderForValue.build());
          onChanged();
        } else {
          bodiesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder addBodies(
          int index, mikron.Mikron.Body.Builder builderForValue) {
        if (bodiesBuilder_ == null) {
          ensureBodiesIsMutable();
          bodies_.add(index, builderForValue.build());
          onChanged();
        } else {
          bodiesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder addAllBodies(
          java.lang.Iterable<? extends mikron.Mikron.Body> values) {
        if (bodiesBuilder_ == null) {
          ensureBodiesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, bodies_);
          onChanged();
        } else {
          bodiesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder clearBodies() {
        if (bodiesBuilder_ == null) {
          bodies_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          bodiesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public Builder removeBodies(int index) {
        if (bodiesBuilder_ == null) {
          ensureBodiesIsMutable();
          bodies_.remove(index);
          onChanged();
        } else {
          bodiesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public mikron.Mikron.Body.Builder getBodiesBuilder(
          int index) {
        return getBodiesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public mikron.Mikron.BodyOrBuilder getBodiesOrBuilder(
          int index) {
        if (bodiesBuilder_ == null) {
          return bodies_.get(index);  } else {
          return bodiesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public java.util.List<? extends mikron.Mikron.BodyOrBuilder> 
           getBodiesOrBuilderList() {
        if (bodiesBuilder_ != null) {
          return bodiesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(bodies_);
        }
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public mikron.Mikron.Body.Builder addBodiesBuilder() {
        return getBodiesFieldBuilder().addBuilder(
            mikron.Mikron.Body.getDefaultInstance());
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public mikron.Mikron.Body.Builder addBodiesBuilder(
          int index) {
        return getBodiesFieldBuilder().addBuilder(
            index, mikron.Mikron.Body.getDefaultInstance());
      }
      /**
       * <code>repeated .Body bodies = 2;</code>
       */
      public java.util.List<mikron.Mikron.Body.Builder> 
           getBodiesBuilderList() {
        return getBodiesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          mikron.Mikron.Body, mikron.Mikron.Body.Builder, mikron.Mikron.BodyOrBuilder> 
          getBodiesFieldBuilder() {
        if (bodiesBuilder_ == null) {
          bodiesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              mikron.Mikron.Body, mikron.Mikron.Body.Builder, mikron.Mikron.BodyOrBuilder>(
                  bodies_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          bodies_ = null;
        }
        return bodiesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return this;
      }


      // @@protoc_insertion_point(builder_scope:Snapshot)
    }

    // @@protoc_insertion_point(class_scope:Snapshot)
    private static final mikron.Mikron.Snapshot DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new mikron.Mikron.Snapshot();
    }

    public static mikron.Mikron.Snapshot getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Snapshot>
        PARSER = new com.google.protobuf.AbstractParser<Snapshot>() {
      public Snapshot parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new Snapshot(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Snapshot> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Snapshot> getParserForType() {
      return PARSER;
    }

    public mikron.Mikron.Snapshot getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Doubles_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Doubles_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Person_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Person_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Quartet_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Quartet_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Coord_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Coord_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_FixtureUserData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_FixtureUserData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Fixture_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Fixture_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_BodyUserData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_BodyUserData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Body_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Body_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Snapshot_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Snapshot_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014mikron.proto\"\032\n\007Doubles\022\017\n\007doubles\030\001 \003" +
      "(\001\"-\n\006Person\022\021\n\tfirstName\030\001 \001(\t\022\020\n\010lastN" +
      "ame\030\002 \001(\t\"]\n\007Quartet\022\023\n\002p1\030\001 \001(\0132\007.Perso" +
      "n\022\023\n\002p2\030\002 \001(\0132\007.Person\022\023\n\002p3\030\003 \001(\0132\007.Per" +
      "son\022\023\n\002p4\030\004 \001(\0132\007.Person\"\035\n\005Coord\022\t\n\001x\030\001" +
      " \001(\001\022\t\n\001y\030\002 \001(\001\" \n\017FixtureUserData\022\r\n\005co" +
      "lor\030\001 \001(\005\"E\n\007Fixture\022\"\n\010userData\030\001 \001(\0132\020" +
      ".FixtureUserData\022\026\n\006coords\030\002 \003(\0132\006.Coord" +
      "\"\032\n\014BodyUserData\022\n\n\002id\030\001 \001(\005\"\300\001\n\004Body\022\037\n" +
      "\010userData\030\001 \001(\0132\r.BodyUserData\022\030\n\010positi",
      "on\030\002 \001(\0132\006.Coord\022\r\n\005angle\030\003 \001(\001\022 \n\010bodyT" +
      "ype\030\004 \001(\0162\016.Body.BodyType\022\032\n\010fixtures\030\005 " +
      "\003(\0132\010.Fixture\"0\n\010BodyType\022\013\n\007DYNAMIC\020\000\022\n" +
      "\n\006STATIC\020\001\022\013\n\007KINETIC\020\002\"/\n\010Snapshot\022\014\n\004t" +
      "ime\030\001 \001(\003\022\025\n\006bodies\030\002 \003(\0132\005.BodyB\010\n\006mikr" +
      "onb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_Doubles_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Doubles_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Doubles_descriptor,
        new java.lang.String[] { "Doubles", });
    internal_static_Person_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Person_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Person_descriptor,
        new java.lang.String[] { "FirstName", "LastName", });
    internal_static_Quartet_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Quartet_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Quartet_descriptor,
        new java.lang.String[] { "P1", "P2", "P3", "P4", });
    internal_static_Coord_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_Coord_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Coord_descriptor,
        new java.lang.String[] { "X", "Y", });
    internal_static_FixtureUserData_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_FixtureUserData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_FixtureUserData_descriptor,
        new java.lang.String[] { "Color", });
    internal_static_Fixture_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_Fixture_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Fixture_descriptor,
        new java.lang.String[] { "UserData", "Coords", });
    internal_static_BodyUserData_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_BodyUserData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_BodyUserData_descriptor,
        new java.lang.String[] { "Id", });
    internal_static_Body_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_Body_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Body_descriptor,
        new java.lang.String[] { "UserData", "Position", "Angle", "BodyType", "Fixtures", });
    internal_static_Snapshot_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_Snapshot_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Snapshot_descriptor,
        new java.lang.String[] { "Time", "Bodies", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
