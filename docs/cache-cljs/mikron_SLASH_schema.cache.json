["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$mikron.schema","~:imports",null,"~:requires",["^ ","~$util.schema","~$mikron.util.schema","^:","^:"],"~:uses",null,"~:defs",["^ ","~$aliases",["^ ","^5","~$mikron.schema/aliases","~:file","mikron/schema.cljc","~:line",5,"~:column",1,"~:end-line",5,"~:end-column",13,"~:meta",["^ ","^?","^6","^@",5,"^A",6,"^B",5,"^C",13],"~:doc","The default built-in aliased types."],"~$graph->hierarchy",["^ ","~:protocol-inline",null,"^D",["^ ","^?","^6","^@",19,"^A",7,"^B",19,"^C",23,"~:arglists",["~#list",["~$quote",["^I",[["~$graph"]]]]],"^E","Converts a graph to a hierarchy."],"^5","~$mikron.schema/graph->hierarchy","~:variadic",false,"^?","mikron/schema.cljc","^C",23,"~:method-params",["^I",[["^K"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^A",1,"^@",19,"^B",19,"~:max-fixed-arity",1,"~:fn-var",true,"^H",["^I",["^J",["^I",[["^K"]]]]],"^E","Converts a graph to a hierarchy."],"~$hierarchy",["^ ","^5","~$mikron.schema/hierarchy","^?","mikron/schema.cljc","^@",27,"^A",1,"^B",27,"^C",15,"^D",["^ ","^?","^6","^@",27,"^A",6,"^B",27,"^C",15],"^E","The default type hierarchy."],"~$derives",["^ ","^G",null,"^D",["^ ","^?","^6","^@",13,"^A",7,"^B",13,"^C",14,"^H",["^I",["^J",["^I",[["^S","~$parent","~$children"]]]]],"^E","Returns a new hierarchy in which all `children` derive from `parent`, using\n  `hierarchy` as the base."],"^5","~$mikron.schema/derives","^M",false,"^?","mikron/schema.cljc","^C",14,"^N",["^I",[["^S","^V","^W"]]],"^O",null,"^P",["^I",[null,null]],"^A",1,"^@",13,"^B",13,"^Q",3,"^R",true,"^H",["^I",["^J",["^I",[["^S","^V","^W"]]]]],"^E","Returns a new hierarchy in which all `children` derive from `parent`, using\n  `hierarchy` as the base."]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:enum","~:binary","~$cljs.core/str","^=","^F","^S","~:long","~:double","~:short","~:ushort","~$mikron.util.schema/int->char","~:ubyte","~:int","~:number","^X","~:uint","~:float","~:ns","~:symbol","^W","^5","~:complex","~:simple","^?","~$mikron.util.schema/binary->string","^C","~:coll","~:floating","^V","~:tuple","^L","~:=-comparable","^T","~:string","~:vector","^A","~:primitive","~:integer","^>","~$mikron.util.schema/string->any","^@","~:list","~:keyword","~:multi","^U","~$cljs.core/symbol","~:byte","~:optional","~$mikron.util.schema/keyword->string","~:nil","~:record","^6","~$mikron.util.schema/char->int","~:built-in","^B","~:aliased","~:varint","~:set","^H","~$mikron.util.schema/string->binary","^E","^K","~:identical?-comparable","~$mikron.util.schema/string->keyword","~:boolean","~:wrapped","~:map","~:test","~:char","~:keyword-comparable","~:any","~$mikron.util.schema/any->string"]],"~:order",["^1>","^1F","^1L","^24","^26","^21","^12","^1N","^1Y","^1A","^11","^1Q","^1[","^1T","^17","^19","^27","^1J","^>","^1=","^5","^?","^C","^A","^@","^B","^H","^E","^23","^6","^=","^X","^U","^S","^V","^W","^L","^F","^K","^1:","^1?","^1@","^1B","^1C","^1E","^1H","^1I","^1U","^1V","^1Z","^25","^22","^1D","^1S","^1P","^1M","^10","^1K","^1G","^1X","^1<","^14","^20","^1R","^1O","^18","^15","^16","^1;","^13","^1W","^T"]],"^E","Schema hierarchy."]