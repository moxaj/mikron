["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$mikron.schema","~:imports",null,"~:requires",["^ ","~$util.schema","~$mikron.util.schema","^:","^:"],"~:uses",null,"~:defs",["^ ","~$aliases",["^ ","~:meta",["^ ","~:file","^6","~:line",5,"~:column",6,"~:end-line",5,"~:end-column",13],"^5","~$mikron.schema/aliases","^?","mikron/schema.cljc","^C",13,"^A",1,"^@",5,"^B",5,"~:tag","~$cljs.core/IMap","~:doc","The default built-in aliased types."],"~$graph->hierarchy",["^ ","~:protocol-inline",null,"^>",["^ ","^?","^6","^@",19,"^A",7,"^B",19,"^C",23,"~:arglists",["~#list",["~$quote",["^K",[["~$graph"]]]]],"^G","Converts a graph to a hierarchy."],"^5","~$mikron.schema/graph->hierarchy","~:variadic",false,"^?","mikron/schema.cljc","^C",23,"~:method-params",["^K",[["^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^A",1,"^@",19,"^B",19,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^G","Converts a graph to a hierarchy."],"~$hierarchy",["^ ","^>",["^ ","^?","^6","^@",27,"^A",6,"^B",27,"^C",15],"^5","~$mikron.schema/hierarchy","^?","mikron/schema.cljc","^C",15,"^A",1,"^@",27,"^B",27,"^E","~$any","^G","The default type hierarchy."],"~$derives",["^ ","^I",null,"^>",["^ ","^?","^6","^@",13,"^A",7,"^B",13,"^C",14,"^J",["^K",["^L",["^K",[["^U","~$parent","~$children"]]]]],"^G","Returns a new hierarchy in which all `children` derive from `parent`, using\n  `hierarchy` as the base."],"^5","~$mikron.schema/derives","^O",false,"^?","mikron/schema.cljc","^C",14,"^P",["^K",[["^U","^Y","^Z"]]],"^Q",null,"^R",["^K",[null,null]],"^A",1,"^@",13,"^B",13,"^S",3,"^T",true,"^J",["^K",["^L",["^K",[["^U","^Y","^Z"]]]]],"^G","Returns a new hierarchy in which all `children` derive from `parent`, using\n  `hierarchy` as the base."]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:enum","~:binary","~$cljs.core/str","^=","^H","^U","~:long","~:double","~:short","~:ushort","~$mikron.util.schema/int->char","~:ubyte","~:int","~:number","^[","~:uint","~:float","~:ns","~:symbol","^Z","^5","~:complex","~:simple","^?","~$mikron.util.schema/binary->string","^C","~:coll","~:floating","^Y","~:tuple","^N","~:=-comparable","^V","~:string","~:vector","^A","~:primitive","~:integer","^D","~$mikron.util.schema/string->any","^@","~:list","~:keyword","~:multi","^X","~$cljs.core/symbol","~:byte","~:optional","~$mikron.util.schema/keyword->string","~:nil","~:record","^6","~$mikron.util.schema/char->int","~:built-in","^B","~:aliased","~:varint","~:set","^J","~$mikron.util.schema/string->binary","^G","^M","~:identical?-comparable","~$mikron.util.schema/string->keyword","~:boolean","~:wrapped","~:map","~:test","~:char","~:keyword-comparable","~:any","~$mikron.util.schema/any->string"]],"~:order",["^27","^1I","^1O","^1A","^29","^24","^1W","^1:","^1<","^20","^1D","^14","^1T","^22","^15","^1Q","^2:","^1M","^D","^1@","^5","^?","^C","^A","^@","^B","^J","^G","^26","^6","^=","^[","^X","^U","^Y","^Z","^N","^H","^M","^1=","^1B","^1C","^1E","^1F","^1H","^1K","^1L","^1X","^1Y","^21","^28","^25","^1G","^1V","^1S","^1P","^13","^1N","^1J","^1[","^1?","^17","^23","^1U","^1R","^1;","^18","^19","^1>","^16","^1Z","^V"]],"^G","Schema hierarchy."]