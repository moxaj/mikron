["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Object",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$mikron.core","~:imports",null,"~:requires",["^ ","~$mikron.compile-util","^<","~$mikron.util","^=","~$mikron.buffer","^>","~$mikron.codegen.gen","^?","~$mikron.codegen.validate","^@","~$buffer","^>","~$compile-util","^<","~$mikron.codegen.unpack","^C","~$util","^=","~$mikron.spec","^E","~$mikron.util.math","^F","~$util.math","^F","~$mikron.codegen.pack","^H","~$spec","^E","~$mikron.codegen.interp","^J","~$mikron.codegen.diff","^K"],"~:uses",null,"~:defs",["^ ","~$allocate-buffer",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^9","~:line",66,"~:column",7,"~:end-line",66,"~:end-column",22,"~:arglists",["~#list",["~$quote",["^W",[["~$size"]]]]],"~:doc","Allocates a new buffer with the given `size`."],"^8","~$mikron.core/allocate-buffer","~:variadic",false,"^Q","mikron/core.cljc","^U",22,"~:method-params",["^W",[["^Y"]]],"~:protocol-impl",null,"~:arglists-meta",["^W",[null,null]],"^S",1,"^R",66,"^T",66,"~:max-fixed-arity",1,"~:fn-var",true,"^V",["^W",["^X",["^W",[["^Y"]]]]],"^Z","Allocates a new buffer with the given `size`."],"~$pack",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",90,"^S",7,"^T",90,"^U",11,"^V",["^W",["^X",["^W",[["~$schema","~$value"]]]]],"^Z","Packs `value`, which must conform to `schema`, and may be an instance of\n  `DiffedValue`."],"^8","~$mikron.core/pack","^10",false,"^Q","mikron/core.cljc","^U",11,"^11",["^W",[["^17","^18"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",90,"^T",90,"^14",2,"^15",true,"^V",["^W",["^X",["^W",[["^17","^18"]]]]],"^Z","Packs `value`, which must conform to `schema`, and may be an instance of\n  `DiffedValue`."],"~$dependencies",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",30,"^S",17,"^T",30,"^U",29,"~:private",true,"^V",["^W",["^X",["^W",[["~$processors"]]]]],"^Z","Returns all the processor dependencies of the given processors."],"^1;",true,"^8","~$mikron.core/dependencies","^10",false,"^Q","mikron/core.cljc","^U",29,"^11",["^W",[["^1<"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",30,"^T",30,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^1<"]]]]],"^Z","Returns all the processor dependencies of the given processors."],"~$diff",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",145,"^S",7,"^T",145,"^U",11,"^V",["^W",["^X",["^W",[["^17","~$value-1","~$value-2"]]]]],"^Z","Returns the diff between the old (`value-1`) and the new (`value-2`) value,\n  both conforming to `schema`. Wraps the return value with `DiffedValue` for `pack`\n  and `undiff` consumption."],"^8","~$mikron.core/diff","^10",false,"^Q","mikron/core.cljc","^U",11,"^11",["^W",[["^17","^1?","^1@"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",145,"^T",145,"^14",3,"^15",true,"^V",["^W",["^X",["^W",[["^17","^1?","^1@"]]]]],"^Z","Returns the diff between the old (`value-1`) and the new (`value-2`) value,\n  both conforming to `schema`. Wraps the return value with `DiffedValue` for `pack`\n  and `undiff` consumption."],"~$*buffer*",["^ ","^P",["^ ","^Q","^9","^R",62,"^S",26,"^T",62,"^U",34,"^1;",true,"~:dynamic",true],"^1;",true,"^8","~$mikron.core/*buffer*","^Q","mikron/core.cljc","^U",34,"^S",1,"^1C",true,"^R",62,"^T",62,"~:tag","~$any","^Z","The default buffer with 10Kb size."],"^17",["^ ","^O",null,"^P",["^ ","^Q","^9","^U",17,"~:top-fn",["^ ","^10",true,"^14",2,"^11",[["^W",["~$&form","~$&env","~$args"]]],"^V",["^W",[["^1H","^1I","~$&","^1J"]]],"^13",["^W",[null]]],"^S",11,"^R",50,"~:macro",true,"^T",50,"^V",["^W",["^X",["^W",[["~$&","^1J"]]]]],"^Z","Creates a new schema."],"^8","~$mikron.core/schema","^10",true,"^Q","mikron/core.cljc","^U",17,"^1G",["^ ","^10",true,"^14",2,"^11",[["^W",["^1H","^1I","^1J"]]],"^V",["^W",[["^1H","^1I","~$&","^1J"]]],"^13",["^W",[null]]],"^11",[["^W",["^1H","^1I","^1J"]]],"^12",null,"^13",["^W",[null]],"^S",1,"^R",50,"^1K",true,"^T",50,"^14",2,"^15",false,"^V",["^W",[["^1H","^1I","~$&","^1J"]]],"^Z","Creates a new schema."],"~$DiffedValue",["^ ","~:num-fields",1,"~:protocols",["^7",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^8","~$mikron.core/DiffedValue","^Q","mikron/core.cljc","^U",23,"~:type",true,"^S",12,"~:internal-ctor",true,"^R",83,"~:record",true,"^T",83,"~:skip-protocol-flag",["^7",["^1P","^1Q","^1R","^1S","^1T","^1U","^1V","^1W","^1X","^1Z","^1[","^20","^21"]]],"^1<",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",23,"^S",17,"^T",23,"^U",27,"^1;",true,"^V",["^W",["^X",["^W",[["~$env"]]]]],"^Z","Returns all the generated processors for the given env."],"^1;",true,"^8","~$mikron.core/processors","^10",false,"^Q","mikron/core.cljc","^U",27,"^11",["^W",[["^27"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",23,"^T",23,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^27"]]]]],"^Z","Returns all the generated processors for the given env."],"~$valid?",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",122,"^S",7,"^T",122,"^U",13,"^V",["^W",["^X",["^W",[["^17","^18"]]]]],"^Z","Returns `true` if `value` conforms to `schema`, `false` otherwise."],"^8","~$mikron.core/valid?","^10",false,"^Q","mikron/core.cljc","^U",13,"^11",["^W",[["^17","^18"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",122,"^T",122,"^14",2,"^15",true,"^V",["^W",["^X",["^W",[["^17","^18"]]]]],"^Z","Returns `true` if `value` conforms to `schema`, `false` otherwise."],"~$undiff",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",154,"^S",7,"^T",154,"^U",13,"^V",["^W",["^X",["^W",[["^17","^1?","^1@"]]]]],"^Z","Returns the original value from the old (`value-1`) and the diffed (`value-2`) value.\n  The old value must conform to `schema`. `value-2` must be an instance of `DiffedValue`."],"^8","~$mikron.core/undiff","^10",false,"^Q","mikron/core.cljc","^U",13,"^11",["^W",[["^17","^1?","^1@"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",154,"^T",154,"^14",3,"^15",true,"^V",["^W",["^X",["^W",[["^17","^1?","^1@"]]]]],"^Z","Returns the original value from the old (`value-1`) and the diffed (`value-2`) value.\n  The old value must conform to `schema`. `value-2` must be an instance of `DiffedValue`."],"~$set-byte-buffer-factory!",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",72,"^S",7,"^T",72,"^U",31,"^V",["^W",["^X",["^W",[["~$factory"]]]]],"^Z","Sets the byte buffer factory."],"^8","~$mikron.core/set-byte-buffer-factory!","^10",false,"^Q","mikron/core.cljc","^U",31,"^11",["^W",[["^2>"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",72,"^T",72,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^2>"]]]]],"^Z","Sets the byte buffer factory."],"~$gen",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",115,"^S",7,"^T",115,"^U",10,"^V",["^W",["^X",["^W",[["^17"]]]]],"^Z","Generates a new value which conforms to `schema`."],"^8","~$mikron.core/gen","^10",false,"^Q","mikron/core.cljc","^U",10,"^11",["^W",[["^17"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",115,"^T",115,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^17"]]]]],"^Z","Generates a new value which conforms to `schema`."],"~$diffed?",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",85,"^S",7,"^T",85,"^U",14,"^V",["^W",["^X",["^W",[["^18"]]]]],"^Z","Returns `true` if `value` is diffed, `false` otherwise."],"^8","~$mikron.core/diffed?","^10",false,"^Q","mikron/core.cljc","^U",14,"^11",["^W",[["^18"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",85,"^T",85,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^18"]]]]],"^Z","Returns `true` if `value` is diffed, `false` otherwise."],"~$defschema",["^ ","^O",null,"^P",["^ ","^Q","^9","^U",20,"^1G",["^ ","^10",true,"^14",2,"^11",[["^W",["^1H","^1I","^1J"]]],"^V",["^W",[["^1H","^1I","~$&","^1J"]]],"^13",["^W",[null]]],"^S",11,"^R",55,"^1K",true,"^T",55,"^V",["^W",["^X",["^W",[["~$&","^1J"]]]]],"^Z","Creates a new schema and binds it to the given symbol."],"^8","~$mikron.core/defschema","^10",true,"^Q","mikron/core.cljc","^U",20,"^1G",["^ ","^10",true,"^14",2,"^11",[["^W",["^1H","^1I","^1J"]]],"^V",["^W",[["^1H","^1I","~$&","^1J"]]],"^13",["^W",[null]]],"^11",[["^W",["^1H","^1I","^1J"]]],"^12",null,"^13",["^W",[null]],"^S",1,"^R",55,"^1K",true,"^T",55,"^14",2,"^15",false,"^V",["^W",[["^1H","^1I","~$&","^1J"]]],"^Z","Creates a new schema and binds it to the given symbol."],"~$unpack",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",103,"^S",7,"^T",103,"^U",13,"^V",["^W",["^X",["^W",[["^17","~$binary"]]]]],"^Z","Unpacks a value (which conforms to `schema`) from the binary value `binary`."],"^8","~$mikron.core/unpack","^10",false,"^Q","mikron/core.cljc","^U",13,"^11",["^W",[["^17","^2G"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",103,"^T",103,"^14",2,"^15",true,"^V",["^W",["^X",["^W",[["^17","^2G"]]]]],"^Z","Unpacks a value (which conforms to `schema`) from the binary value `binary`."],"~$diff*",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",129,"^S",7,"^T",129,"^U",12,"^V",["^W",["^X",["^W",[["^17","^1?","^1@"]]]]],"^Z","Returns the diff between the old (`value-1`) and the new (`value-2`) value,\n  both conforming to `schema`."],"^8","~$mikron.core/diff*","^10",false,"^Q","mikron/core.cljc","^U",12,"^11",["^W",[["^17","^1?","^1@"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",129,"^T",129,"^14",3,"^15",true,"^V",["^W",["^X",["^W",[["^17","^1?","^1@"]]]]],"^Z","Returns the diff between the old (`value-1`) and the new (`value-2`) value,\n  both conforming to `schema`."],"~$->DiffedValue",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",83,"^S",12,"^T",83,"^U",23,"^24",true,"~:factory","~:positional","^V",["^W",["^X",["^W",[["^18"]]]]]],"^8","~$mikron.core/->DiffedValue","^10",false,"^Q","mikron/core.cljc","^U",23,"^11",["^W",[["^18"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^24",true,"^2L","^2M","^R",83,"^T",83,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^18"]]]]]],"~$->Schema",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",16,"^S",12,"^T",16,"^U",18,"^24",true,"^2L","^2M","^V",["^W",["^X",["^W",[["^1<"]]]]]],"^8","~$mikron.core/->Schema","^10",false,"^Q","mikron/core.cljc","^U",18,"^11",["^W",[["^1<"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^24",true,"^2L","^2M","^R",16,"^T",16,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^1<"]]]]]],"~$schema*",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",38,"^S",17,"^T",38,"^U",24,"^1;",true,"^V",["^W",["^X",["^W",[["^27"]]]]],"^Z","Generates all the processor related code for the given env."],"^1;",true,"^8","~$mikron.core/schema*","^10",false,"^Q","mikron/core.cljc","^U",24,"^11",["^W",[["^27"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",38,"^T",38,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^27"]]]]],"^Z","Generates all the processor related code for the given env."],"~$schema?",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",18,"^S",7,"^T",18,"^U",14,"^V",["^W",["^X",["^W",[["^18"]]]]],"^Z","Returns `true` if `value` is an instance of `Schema`, `false` otherwise."],"^8","~$mikron.core/schema?","^10",false,"^Q","mikron/core.cljc","^U",14,"^11",["^W",[["^18"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",18,"^T",18,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^18"]]]]],"^Z","Returns `true` if `value` is an instance of `Schema`, `false` otherwise."],"~$map->DiffedValue",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",83,"^S",12,"^T",83,"^U",23,"^24",true,"^2L","~:map","^V",["^W",["^X",["^W",[["~$G__918"]]]]]],"^8","~$mikron.core/map->DiffedValue","^10",false,"^Q","mikron/core.cljc","^U",23,"^11",["^W",[["^2W"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^24",true,"^2L","^2V","^R",83,"^T",83,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^2W"]]]]]],"~$interp",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",162,"^S",7,"^T",162,"^U",13,"^V",["^W",["^X",["^W",[["^17","^1?","^1@","~$time-1","~$time-2","~$time"]]]]],"^Z","Calculates a new value of an entity at `time`, given two other values\n  (`value-1` and `value-2`, both conforming to `schema`) and their respective\n  timestamps (`time-1` and `time-2`). Uses linear interpolation."],"^8","~$mikron.core/interp","^10",false,"^Q","mikron/core.cljc","^U",13,"^11",["^W",[["^17","^1?","^1@","^2Z","^2[","^30"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",162,"^T",162,"^14",6,"^15",true,"^V",["^W",["^X",["^W",[["^17","^1?","^1@","^2Z","^2[","^30"]]]]],"^Z","Calculates a new value of an entity at `time`, given two other values\n  (`value-1` and `value-2`, both conforming to `schema`) and their respective\n  timestamps (`time-1` and `time-2`). Uses linear interpolation."],"~$with-buffer",["^ ","^O",null,"^P",["^ ","^Q","^9","^U",22,"^1G",["^ ","^10",true,"^14",3,"^11",[["^W",["^1H","^1I","^A","~$body"]]],"^V",["^W",[["^1H","^1I","^A","~$&","^33"]]],"^13",["^W",[null]]],"^S",11,"^R",77,"^1K",true,"^T",77,"^V",["^W",["^X",["^W",[["^A","~$&","^33"]]]]],"^Z","Executes all the expressions of `body` in the context of `buffer`."],"^8","~$mikron.core/with-buffer","^10",true,"^Q","mikron/core.cljc","^U",22,"^1G",["^ ","^10",true,"^14",3,"^11",[["^W",["^1H","^1I","^A","^33"]]],"^V",["^W",[["^1H","^1I","^A","~$&","^33"]]],"^13",["^W",[null]]],"^11",[["^W",["^1H","^1I","^A","^33"]]],"^12",null,"^13",["^W",[null]],"^S",1,"^R",77,"^1K",true,"^T",77,"^14",3,"^15",false,"^V",["^W",[["^1H","^1I","^A","~$&","^33"]]],"^Z","Executes all the expressions of `body` in the context of `buffer`."],"~$map->Schema",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",16,"^S",12,"^T",16,"^U",18,"^24",true,"^2L","^2V","^V",["^W",["^X",["^W",[["~$G__872"]]]]]],"^8","~$mikron.core/map->Schema","^10",false,"^Q","mikron/core.cljc","^U",18,"^11",["^W",[["^36"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^24",true,"^2L","^2V","^R",16,"^T",16,"^14",1,"^15",true,"^V",["^W",["^X",["^W",[["^36"]]]]]],"~$Schema",["^ ","^1N",1,"^1O",["^7",["^1P","^1Q","^1R","^1S","^1T","^1U","^1V","^1W","^1X","^1Y","^1Z","^1[","^20","^21"]],"^8","~$mikron.core/Schema","^Q","mikron/core.cljc","^U",18,"^23",true,"^S",12,"^24",true,"^R",16,"^25",true,"^T",16,"^26",["^7",["^1P","^1Q","^1R","^1S","^1T","^1U","^1V","^1W","^1X","^1Z","^1[","^20","^21"]]],"~$undiff*",["^ ","^O",null,"^P",["^ ","^Q","^9","^R",137,"^S",7,"^T",137,"^U",14,"^V",["^W",["^X",["^W",[["^17","^1?","^1@"]]]]],"^Z","Returns the original value from the old (`value-1`) and the diffed (`value-2`) value.\n  The old value must conform to `schema`."],"^8","~$mikron.core/undiff*","^10",false,"^Q","mikron/core.cljc","^U",14,"^11",["^W",[["^17","^1?","^1@"]]],"^12",null,"^13",["^W",[null,null]],"^S",1,"^R",137,"^T",137,"^14",3,"^15",true,"^V",["^W",["^X",["^W",[["^17","^1?","^1@"]]]]],"^Z","Returns the original value from the old (`value-1`) and the diffed (`value-2`) value.\n  The old value must conform to `schema`."]],"~:require-macros",["^ ","^9","^9"],"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~$cljs.core/binding","~:unpack-diffed","~:processors","~:valid?","~:diffed?","~:else","~:undiff","~:gen","~:processor-fn","~:value","~$.-processors","~:unpack","~$mikron.core/Schema.","^1<","~:doc-string","~:processor-type","^18","~$cljs.core/let","^1D","~:interp","~:mikron.spec/schema-args","~:mikron.spec/defschema-args","~$cljs.core/fn","~:mikron/invalid","~:pack-diffed","~:pack","~:schema-name","~$def","~:diff"]],"~:order",["^3A","^1<","^3M","^3G","^3R","^3V","^3N","^3I","^3K","^3P","^3Q","^3L","^3W","^3?","^1D","^3H","^18","^3T","^3U","^3S","^3D","^3C","^3@","^3J","^3F","^3B","^3X","^3E","^3O"]],"^Z","Core namespace."]