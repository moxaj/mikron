["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$mikron.compile-util$macros","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$tuple-lookup",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","~$mikron.compile-util","~:line",108,"~:column",7,"~:end-line",108,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^E",[["~$tuple","~$index"]]]]],"~:doc","Generates code for tuple value lookup."],"^5","~$mikron.compile-util$macros/tuple-lookup","~:variadic",false,"^>","mikron/compile_util.cljc","^C",19,"~:method-params",["^E",[["^G","^H"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"^@",108,"^B",108,"~:max-fixed-arity",2,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G","^H"]]]]],"^I","Generates code for tuple value lookup."],"~$processor",["^ ","^=",["^ ","^>","^?","^@",126,"^A",11,"^B",126,"^C",20,"^I","Generates processor code."],"^5","~$mikron.compile-util$macros/processor","^>","mikron/compile_util.cljc","^C",20,"^A",1,"^@",126,"^B",126,"~:tag","~$cljs.core/MultiFn","^I","Generates processor code."],"~$processor-name",["^ ","^=",["^ ","^>","^?","^@",7,"^A",6,"^B",7,"^C",20],"^5","~$mikron.compile-util$macros/processor-name","^>","mikron/compile_util.cljc","^C",20,"^A",1,"^@",7,"^B",7,"^S","~$any","^I","Returns a memoized processor name."],"~$cljs?",["^ ","^<",null,"^=",["^ ","^>","^?","^@",18,"^A",11,"^B",18,"^C",16,"~:macro",true,"^D",["^E",["^F",["^E",[[]]]]],"^I","Returns `true` if compiled for cljs, `false` otherwise."],"^5","~$mikron.compile-util$macros/cljs?","^K",false,"^>","mikron/compile_util.cljc","^C",16,"^L",["^E",[["~$&form","~$&env"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",18,"^Y",true,"^B",18,"^O",2,"^P",false,"^D",["^E",["^F",["^E",[[]]]]],"^I","Returns `true` if compiled for cljs, `false` otherwise."],"~$tuple->fields",["^ ","^<",null,"^=",["^ ","^>","^?","^@",113,"^A",7,"^B",113,"^C",20,"^D",["^E",["^F",["^E",[["~$schemas"]]]]],"^I","Returns a map from tuple indices to generated symbols."],"^5","~$mikron.compile-util$macros/tuple->fields","^K",false,"^>","mikron/compile_util.cljc","^C",20,"^L",["^E",[["^12"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",113,"^B",113,"^O",1,"^P",true,"^D",["^E",["^F",["^E",[["^12"]]]]],"^I","Returns a map from tuple indices to generated symbols."],"~$fields->tuple",["^ ","^<",null,"^=",["^ ","^>","^?","^@",121,"^A",7,"^B",121,"^C",20,"^D",["^E",["^F",["^E",[["~$fields"]]]]],"^I","Generates code which reconstructs a tuple from its fields."],"^5","~$mikron.compile-util$macros/fields->tuple","^K",false,"^>","mikron/compile_util.cljc","^C",20,"^L",["^E",[["^15"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",121,"^B",121,"^O",1,"^P",true,"^D",["^E",["^F",["^E",[["^15"]]]]],"^I","Generates code which reconstructs a tuple from its fields."],"~$record-lookup",["^ ","^<",null,"^=",["^ ","^>","^?","^@",82,"^A",7,"^B",82,"^C",20,"^D",["^E",["^F",["^E",[["~$record","~$key",["~$class"]]]]]],"^I","Generates code for record value lookup."],"^5","~$mikron.compile-util$macros/record-lookup","^K",false,"^>","mikron/compile_util.cljc","^C",20,"^L",["^E",[["^18","^19","~$p__68"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",82,"^B",82,"^O",3,"^P",true,"^D",["^E",["^F",["^E",[["^18","^19",["^1:"]]]]]],"^I","Generates code for record value lookup."],"~$record->fields",["^ ","^<",null,"^=",["^ ","^>","^?","^@",90,"^A",7,"^B",90,"^C",21,"^D",["^E",["^F",["^E",[["^12"]]]]],"^I","Returns a map from record keys to generated symbols."],"^5","~$mikron.compile-util$macros/record->fields","^K",false,"^>","mikron/compile_util.cljc","^C",21,"^L",["^E",[["^12"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",90,"^B",90,"^O",1,"^P",true,"^D",["^E",["^F",["^E",[["^12"]]]]],"^I","Returns a map from record keys to generated symbols."],"~$find-by*",["^ ","^<",null,"^=",["^ ","^>","^?","^@",47,"^A",7,"^B",47,"^C",15,"^D",["^E",["^F",["^E",[["~$f","~$form"]]]]],"^I","Walks `form` and collects all values for which the predicate `f` returns `true`.\n  Does not filter duplicates."],"^5","~$mikron.compile-util$macros/find-by*","^K",false,"^>","mikron/compile_util.cljc","^C",15,"^L",["^E",[["~$f","^1@"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",47,"^B",47,"^O",2,"^P",true,"^D",["^E",["^F",["^E",[["~$f","^1@"]]]]],"^I","Walks `form` and collects all values for which the predicate `f` returns `true`.\n  Does not filter duplicates."],"~$fields->record",["^ ","^<",null,"^=",["^ ","^>","^?","^@",98,"^A",7,"^B",98,"^C",21,"^D",["^E",["^F",["^E",[["^15",["^1:","~$&","~$members"]]]]]],"^I","Generates code which reconstructs a record from its fields."],"^5","~$mikron.compile-util$macros/fields->record","^K",false,"^>","mikron/compile_util.cljc","^C",21,"^L",["^E",[["^15","~$p__75"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",98,"^B",98,"^O",2,"^P",true,"^D",["^E",["^F",["^E",[["^15",["^1:","~$&","^1C"]]]]]],"^I","Generates code which reconstructs a record from its fields."],"~$with-evaluated",["^ ","^<",null,"^=",["^ ","^>","^?","^C",25,"~:top-fn",["^ ","^K",true,"^O",3,"^L",[["^E",["^[","^10","~$syms","~$body"]]],"^D",["^E",[["^[","^10","^1H","~$&","^1I"]]],"^N",["^E",[null]]],"^A",11,"^@",32,"^Y",true,"^B",32,"^D",["^E",["^F",["^E",[["^1H","~$&","^1I"]]]]],"^I","Executes each expression of `body` in the context of each symbol in `syms`\n  bound to an **evaluated** value. Can be used to prevent accidental multiple evaluation\n  in macros."],"^5","~$mikron.compile-util$macros/with-evaluated","^K",true,"^>","mikron/compile_util.cljc","^C",25,"^1G",["^ ","^K",true,"^O",3,"^L",[["^E",["^[","^10","^1H","^1I"]]],"^D",["^E",[["^[","^10","^1H","~$&","^1I"]]],"^N",["^E",[null]]],"^L",[["^E",["^[","^10","^1H","^1I"]]],"^M",null,"^N",["^E",[null]],"^A",1,"^@",32,"^Y",true,"^B",32,"^O",3,"^P",false,"^D",["^E",[["^[","^10","^1H","~$&","^1I"]]],"^I","Executes each expression of `body` in the context of each symbol in `syms`\n  bound to an **evaluated** value. Can be used to prevent accidental multiple evaluation\n  in macros."],"~$find-by",["^ ","^<",null,"^=",["^ ","^>","^?","^@",56,"^A",7,"^B",56,"^C",14,"^D",["^E",["^F",["^E",[["~$f","^1@"]]]]],"^I","Walks `form` and collects all values for which the predicate `f` returns true.\n  Filter duplicates."],"^5","~$mikron.compile-util$macros/find-by","^K",false,"^>","mikron/compile_util.cljc","^C",14,"^L",["^E",[["~$f","^1@"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",56,"^B",56,"^O",2,"^P",true,"^D",["^E",["^F",["^E",[["~$f","^1@"]]]]],"^I","Walks `form` and collects all values for which the predicate `f` returns true.\n  Filter duplicates."],"~$with-gensyms",["^ ","^<",null,"^=",["^ ","^>","^?","^C",23,"^1G",["^ ","^K",true,"^O",3,"^L",[["^E",["^[","^10","^1H","^1I"]]],"^D",["^E",[["^[","^10","^1H","~$&","^1I"]]],"^N",["^E",[null]]],"^A",11,"^@",23,"^Y",true,"^B",23,"^D",["^E",["^F",["^E",[["^1H","~$&","^1I"]]]]],"^I","Executes each expression of `body` in the context of each symbol in `syms`\n  bound to a generated symbol."],"^5","~$mikron.compile-util$macros/with-gensyms","^K",true,"^>","mikron/compile_util.cljc","^C",23,"^1G",["^ ","^K",true,"^O",3,"^L",[["^E",["^[","^10","^1H","^1I"]]],"^D",["^E",[["^[","^10","^1H","~$&","^1I"]]],"^N",["^E",[null]]],"^L",[["^E",["^[","^10","^1H","^1I"]]],"^M",null,"^N",["^E",[null]],"^A",1,"^@",23,"^Y",true,"^B",23,"^O",3,"^P",false,"^D",["^E",[["^[","^10","^1H","~$&","^1I"]]],"^I","Executes each expression of `body` in the context of each symbol in `syms`\n  bound to a generated symbol."],"~$type-of",["^ ","^<",null,"^=",["^ ","^>","^?","^@",64,"^A",7,"^B",64,"^C",14,"^D",["^E",["^F",["^E",[["~$schema","~$&","~$_"]]]]],"^I","Returns the type of `schema` or `nil` if the schema is invalid.","^1G",["^ ","^K",true,"^O",1,"^L",[["^E",["^1P","~$_"]]],"^D",["^E",[["^1P","~$&","~$_"]]],"^N",["^E",[null]]]],"^5","~$mikron.compile-util$macros/type-of","^K",true,"^>","mikron/compile_util.cljc","^C",14,"^1G",["^ ","^K",true,"^O",1,"^L",[["^E",["^1P","~$_"]]],"^D",["^E",[["^1P","~$&","~$_"]]],"^N",["^E",[null]]],"^L",[["^E",["^1P","~$_"]]],"^M",null,"^N",["^E",[null]],"^A",1,"^@",64,"^B",64,"^O",1,"^P",true,"^D",["^E",[["^1P","~$&","~$_"]]],"^I","Returns the type of `schema` or `nil` if the schema is invalid."],"~$integer-type",["^ ","^<",null,"^=",["^ ","^>","^?","^@",73,"^A",7,"^B",73,"^C",19,"^D",["^E",["^F",["^E",[["~$size"]]]]],"^I","Returns an integer type into which `size` can fit."],"^5","~$mikron.compile-util$macros/integer-type","^K",false,"^>","mikron/compile_util.cljc","^C",19,"^L",["^E",[["^1S"]]],"^M",null,"^N",["^E",[null,null]],"^A",1,"^@",73,"^B",73,"^O",1,"^P",true,"^D",["^E",["^F",["^E",[["^1S"]]]]],"^I","Returns an integer type into which `size` can fit."]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:long","~:short","~$mikron.util.coll/nth","~:else","~:int","~:default","~:ns","~$cljs.core/concat","~:custom","~$cljs.core/with-meta","~:processor-type","~$cljs.core/let","~:byte","^10","~$cljs.core/vec","~$cljs.core/sequence","^S","^F","~:hierarchy","~$cljs.core/gensym","~$cljs.core/list","~$cljs.core/boolean","~:schema-name"]],"~:order",["^26","^2?","^2>","^22","^10","^27","^25","^2<","^F","^2:","^23","^2=","^29","^24","^1[","^28","^1Y","^20","^1X","^S","^1Z","^2;","^21"]],"^I","Compile time utility functions."]