["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$count","~$nth","~$every?","~$rand-nth"]],"~:name","~$mikron.util.coll$macros","~:imports",null,"~:requires",["^ ","~$util.math","~$mikron.util.math","^>","^>","~$compile-util","~$mikron.compile-util","^@","^@"],"~:uses",null,"~:defs",["^ ","^7",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","~$mikron.util.coll","~:line",26,"~:column",7,"~:end-line",26,"~:end-column",13,"~:arglists",["~#list",["~$quote",["^L",[["~$pred","~$coll"]]]]],"~:doc","Returns `true` if `pred` returns `true` for each element of a\n  vector `coll`, `false` otherwise."],"^9","~$mikron.util.coll$macros/every?","~:variadic",false,"^E","mikron/util/coll.cljc","^J",13,"~:method-params",["^L",[["^N","^O"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^H",1,"^G",26,"^I",26,"~:max-fixed-arity",2,"~:fn-var",true,"^K",["^L",["^M",["^L",[["^N","^O"]]]]],"^P","Returns `true` if `pred` returns `true` for each element of a\n  vector `coll`, `false` otherwise."],"^8",["^ ","^C",null,"^D",["^ ","^E","^F","^G",21,"^H",7,"^I",21,"^J",15,"^K",["^L",["^M",["^L",[["^O"]]]]],"^P","Returns a random value from a vector `coll`."],"^9","~$mikron.util.coll$macros/rand-nth","^R",false,"^E","mikron/util/coll.cljc","^J",15,"^S",["^L",[["^O"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",21,"^I",21,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^O"]]]]],"^P","Returns a random value from a vector `coll`."],"~$into!",["^ ","^C",null,"^D",["^ ","^E","^F","^G",36,"^H",11,"^I",36,"^J",16,"~:macro",true,"^K",["^L",["^M",["^L",[["^O","~$transient?","~$n","~$expr"]]]]],"^P","Repeatedly evaluates `expr` `n` times, collecting the results into\n  a collection `coll`. Uses transient operations if `transient?` is `true`."],"^9","~$mikron.util.coll$macros/into!","^R",false,"^E","mikron/util/coll.cljc","^J",16,"^S",["^L",[["~$&form","~$&env","^O","^[","~$n","^10"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",36,"^Z",true,"^I",36,"^V",6,"^W",false,"^K",["^L",["^M",["^L",[["^O","^[","~$n","^10"]]]]],"^P","Repeatedly evaluates `expr` `n` times, collecting the results into\n  a collection `coll`. Uses transient operations if `transient?` is `true`."],"^6",["^ ","^C",null,"^D",["^ ","^E","^F","^G",15,"^H",7,"^I",15,"^J",10,"^K",["^L",["^M",["^L",[["^O","~$index"]]]]],"^P","Returns the value of a vector `coll` at the position `index`."],"^9","~$mikron.util.coll$macros/nth","^R",false,"^E","mikron/util/coll.cljc","^J",10,"^S",["^L",[["^O","^14"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",15,"^I",15,"^V",2,"^W",true,"^K",["^L",["^M",["^L",[["^O","^14"]]]]],"^P","Returns the value of a vector `coll` at the position `index`."],"~$into-kv!",["^ ","^C",null,"^D",["^ ","^E","^F","^G",48,"^H",11,"^I",48,"^J",19,"^Z",true,"^K",["^L",["^M",["^L",[["^O","^[","~$n","~$key-expr","~$value-expr"]]]]],"^P","Repeatedly evaluates `key-expr` and `value-expr` `n` times, collecting the results into\n  a map `coll`. Uses transient operations if `transient?` is `true`."],"^9","~$mikron.util.coll$macros/into-kv!","^R",false,"^E","mikron/util/coll.cljc","^J",19,"^S",["^L",[["^12","^13","^O","^[","~$n","^17","^18"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",48,"^Z",true,"^I",48,"^V",7,"^W",false,"^K",["^L",["^M",["^L",[["^O","^[","~$n","^17","^18"]]]]],"^P","Repeatedly evaluates `key-expr` and `value-expr` `n` times, collecting the results into\n  a map `coll`. Uses transient operations if `transient?` is `true`."],"^5",["^ ","^C",null,"^D",["^ ","^E","^F","^G",9,"^H",7,"^I",9,"^J",12,"^K",["^L",["^M",["^L",[["^O"]]]]],"^P","Returns the length of a vector `coll`."],"^9","~$mikron.util.coll$macros/count","^R",false,"^E","mikron/util/coll.cljc","^J",12,"^S",["^L",[["^O"]]],"^T",null,"^U",["^L",[null,null]],"^H",1,"^G",9,"^I",9,"^V",1,"^W",true,"^K",["^L",["^M",["^L",[["^O"]]]]],"^P","Returns the length of a vector `coll`."]],"~:require-macros",["^ ","^?","^@","^@","^@"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~$cljs.core/==","~$cljs.core/unchecked-dec","~$cljs.core/conj","~$if","~$n","~$cljs.core/let","~$cljs.core/long","^O","~$cljs.core/loop","~$recur","~$cljs.core/conj!","~$cljs.core/persistent!","~$cljs.core/transient","~$cljs.core/assoc","~$cljs.core/assoc!"]],"~:order",["^O","~$n","^1B","^1D","^1C","^1H","^1A","^1>","^1G","^1E","^1?","^1F","^1@","^1J","^1I"]],"^P","Fast collection operations."]