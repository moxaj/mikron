["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$mikron.compile-util","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$tuple-lookup",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^6","~:line",108,"~:column",7,"~:end-line",108,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^D",[["~$tuple","~$index"]]]]],"~:doc","Generates code for tuple value lookup."],"^5","~$mikron.compile-util/tuple-lookup","~:variadic",false,"^>","mikron/compile_util.cljc","^B",19,"~:method-params",["^D",[["^F","^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^D",[null,null]],"^@",1,"^?",108,"^A",108,"~:max-fixed-arity",2,"~:fn-var",true,"^C",["^D",["^E",["^D",[["^F","^G"]]]]],"^H","Generates code for tuple value lookup."],"~$processor",["^ ","^=",["^ ","^>","^6","^?",126,"^@",11,"^A",126,"^B",20,"^H","Generates processor code."],"^5","~$mikron.compile-util/processor","^>","mikron/compile_util.cljc","^B",20,"^@",1,"^?",126,"^A",126,"~:tag","~$cljs.core/MultiFn","^H","Generates processor code."],"~$processor-name",["^ ","^=",["^ ","^>","^6","^?",7,"^@",6,"^A",7,"^B",20],"^5","~$mikron.compile-util/processor-name","^>","mikron/compile_util.cljc","^B",20,"^@",1,"^?",7,"^A",7,"^R","~$any","^H","Returns a memoized processor name."],"~$cljs?",["^ ","^<",null,"^=",["^ ","^>","^6","^?",18,"^@",11,"^A",18,"^B",16,"~:macro",true,"^C",["^D",["^E",["^D",[[]]]]],"^H","Returns `true` if compiled for cljs, `false` otherwise."],"^5","~$mikron.compile-util/cljs?","^J",false,"^>","mikron/compile_util.cljc","^B",16,"^K",["^D",[["~$&form","~$&env"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",18,"^X",true,"^A",18,"^N",2,"^O",false,"^C",["^D",["^E",["^D",[[]]]]],"^H","Returns `true` if compiled for cljs, `false` otherwise."],"~$tuple->fields",["^ ","^<",null,"^=",["^ ","^>","^6","^?",113,"^@",7,"^A",113,"^B",20,"^C",["^D",["^E",["^D",[["~$schemas"]]]]],"^H","Returns a map from tuple indices to generated symbols."],"^5","~$mikron.compile-util/tuple->fields","^J",false,"^>","mikron/compile_util.cljc","^B",20,"^K",["^D",[["^11"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",113,"^A",113,"^N",1,"^O",true,"^C",["^D",["^E",["^D",[["^11"]]]]],"^H","Returns a map from tuple indices to generated symbols."],"~$fields->tuple",["^ ","^<",null,"^=",["^ ","^>","^6","^?",121,"^@",7,"^A",121,"^B",20,"^C",["^D",["^E",["^D",[["~$fields"]]]]],"^H","Generates code which reconstructs a tuple from its fields."],"^5","~$mikron.compile-util/fields->tuple","^J",false,"^>","mikron/compile_util.cljc","^B",20,"^K",["^D",[["^14"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",121,"^A",121,"^N",1,"^O",true,"^C",["^D",["^E",["^D",[["^14"]]]]],"^H","Generates code which reconstructs a tuple from its fields."],"~$record-lookup",["^ ","^<",null,"^=",["^ ","^>","^6","^?",82,"^@",7,"^A",82,"^B",20,"^C",["^D",["^E",["^D",[["~$record","~$key",["~$class"]]]]]],"^H","Generates code for record value lookup."],"^5","~$mikron.compile-util/record-lookup","^J",false,"^>","mikron/compile_util.cljc","^B",20,"^K",["^D",[["^17","^18","~$p__117"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",82,"^A",82,"^N",3,"^O",true,"^C",["^D",["^E",["^D",[["^17","^18",["^19"]]]]]],"^H","Generates code for record value lookup."],"~$record->fields",["^ ","^<",null,"^=",["^ ","^>","^6","^?",90,"^@",7,"^A",90,"^B",21,"^C",["^D",["^E",["^D",[["^11"]]]]],"^H","Returns a map from record keys to generated symbols."],"^5","~$mikron.compile-util/record->fields","^J",false,"^>","mikron/compile_util.cljc","^B",21,"^K",["^D",[["^11"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",90,"^A",90,"^N",1,"^O",true,"^C",["^D",["^E",["^D",[["^11"]]]]],"^H","Returns a map from record keys to generated symbols."],"~$find-by*",["^ ","^<",null,"^=",["^ ","^>","^6","^?",47,"^@",7,"^A",47,"^B",15,"^C",["^D",["^E",["^D",[["~$f","~$form"]]]]],"^H","Walks `form` and collects all values for which the predicate `f` returns `true`.\n  Does not filter duplicates."],"^5","~$mikron.compile-util/find-by*","^J",false,"^>","mikron/compile_util.cljc","^B",15,"^K",["^D",[["~$f","^1?"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",47,"^A",47,"^N",2,"^O",true,"^C",["^D",["^E",["^D",[["~$f","^1?"]]]]],"^H","Walks `form` and collects all values for which the predicate `f` returns `true`.\n  Does not filter duplicates."],"~$fields->record",["^ ","^<",null,"^=",["^ ","^>","^6","^?",98,"^@",7,"^A",98,"^B",21,"^C",["^D",["^E",["^D",[["^14",["^19","~$&","~$members"]]]]]],"^H","Generates code which reconstructs a record from its fields."],"^5","~$mikron.compile-util/fields->record","^J",false,"^>","mikron/compile_util.cljc","^B",21,"^K",["^D",[["^14","~$p__124"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",98,"^A",98,"^N",2,"^O",true,"^C",["^D",["^E",["^D",[["^14",["^19","~$&","^1B"]]]]]],"^H","Generates code which reconstructs a record from its fields."],"~$with-evaluated",["^ ","^<",null,"^=",["^ ","^>","^6","^B",25,"~:top-fn",["^ ","^J",true,"^N",3,"^K",[["^D",["^Z","^[","~$syms","~$body"]]],"^C",["^D",[["^Z","^[","^1G","~$&","^1H"]]],"^M",["^D",[null]]],"^@",11,"^?",32,"^X",true,"^A",32,"^C",["^D",["^E",["^D",[["^1G","~$&","^1H"]]]]],"^H","Executes each expression of `body` in the context of each symbol in `syms`\n  bound to an **evaluated** value. Can be used to prevent accidental multiple evaluation\n  in macros."],"^5","~$mikron.compile-util/with-evaluated","^J",true,"^>","mikron/compile_util.cljc","^B",25,"^1F",["^ ","^J",true,"^N",3,"^K",[["^D",["^Z","^[","^1G","^1H"]]],"^C",["^D",[["^Z","^[","^1G","~$&","^1H"]]],"^M",["^D",[null]]],"^K",[["^D",["^Z","^[","^1G","^1H"]]],"^L",null,"^M",["^D",[null]],"^@",1,"^?",32,"^X",true,"^A",32,"^N",3,"^O",false,"^C",["^D",[["^Z","^[","^1G","~$&","^1H"]]],"^H","Executes each expression of `body` in the context of each symbol in `syms`\n  bound to an **evaluated** value. Can be used to prevent accidental multiple evaluation\n  in macros."],"~$find-by",["^ ","^<",null,"^=",["^ ","^>","^6","^?",56,"^@",7,"^A",56,"^B",14,"^C",["^D",["^E",["^D",[["~$f","^1?"]]]]],"^H","Walks `form` and collects all values for which the predicate `f` returns true.\n  Filter duplicates."],"^5","~$mikron.compile-util/find-by","^J",false,"^>","mikron/compile_util.cljc","^B",14,"^K",["^D",[["~$f","^1?"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",56,"^A",56,"^N",2,"^O",true,"^C",["^D",["^E",["^D",[["~$f","^1?"]]]]],"^H","Walks `form` and collects all values for which the predicate `f` returns true.\n  Filter duplicates."],"~$with-gensyms",["^ ","^<",null,"^=",["^ ","^>","^6","^B",23,"^1F",["^ ","^J",true,"^N",3,"^K",[["^D",["^Z","^[","^1G","^1H"]]],"^C",["^D",[["^Z","^[","^1G","~$&","^1H"]]],"^M",["^D",[null]]],"^@",11,"^?",23,"^X",true,"^A",23,"^C",["^D",["^E",["^D",[["^1G","~$&","^1H"]]]]],"^H","Executes each expression of `body` in the context of each symbol in `syms`\n  bound to a generated symbol."],"^5","~$mikron.compile-util/with-gensyms","^J",true,"^>","mikron/compile_util.cljc","^B",23,"^1F",["^ ","^J",true,"^N",3,"^K",[["^D",["^Z","^[","^1G","^1H"]]],"^C",["^D",[["^Z","^[","^1G","~$&","^1H"]]],"^M",["^D",[null]]],"^K",[["^D",["^Z","^[","^1G","^1H"]]],"^L",null,"^M",["^D",[null]],"^@",1,"^?",23,"^X",true,"^A",23,"^N",3,"^O",false,"^C",["^D",[["^Z","^[","^1G","~$&","^1H"]]],"^H","Executes each expression of `body` in the context of each symbol in `syms`\n  bound to a generated symbol."],"~$type-of",["^ ","^<",null,"^=",["^ ","^>","^6","^?",64,"^@",7,"^A",64,"^B",14,"^C",["^D",["^E",["^D",[["~$schema","~$&","~$_"]]]]],"^H","Returns the type of `schema` or `nil` if the schema is invalid.","^1F",["^ ","^J",true,"^N",1,"^K",[["^D",["^1O","~$_"]]],"^C",["^D",[["^1O","~$&","~$_"]]],"^M",["^D",[null]]]],"^5","~$mikron.compile-util/type-of","^J",true,"^>","mikron/compile_util.cljc","^B",14,"^1F",["^ ","^J",true,"^N",1,"^K",[["^D",["^1O","~$_"]]],"^C",["^D",[["^1O","~$&","~$_"]]],"^M",["^D",[null]]],"^K",[["^D",["^1O","~$_"]]],"^L",null,"^M",["^D",[null]],"^@",1,"^?",64,"^A",64,"^N",1,"^O",true,"^C",["^D",[["^1O","~$&","~$_"]]],"^H","Returns the type of `schema` or `nil` if the schema is invalid."],"~$integer-type",["^ ","^<",null,"^=",["^ ","^>","^6","^?",73,"^@",7,"^A",73,"^B",19,"^C",["^D",["^E",["^D",[["~$size"]]]]],"^H","Returns an integer type into which `size` can fit."],"^5","~$mikron.compile-util/integer-type","^J",false,"^>","mikron/compile_util.cljc","^B",19,"^K",["^D",[["^1R"]]],"^L",null,"^M",["^D",[null,null]],"^@",1,"^?",73,"^A",73,"^N",1,"^O",true,"^C",["^D",["^E",["^D",[["^1R"]]]]],"^H","Returns an integer type into which `size` can fit."]],"~:require-macros",["^ ","^6","^6"],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:long","~:short","~$mikron.util.coll/nth","~:else","~:int","~:default","~:ns","~$cljs.core/concat","~:custom","~$cljs.core/with-meta","~:processor-type","~$cljs.core/let","~:byte","^[","~$cljs.core/vec","~$cljs.core/sequence","^R","^E","~:hierarchy","~$cljs.core/gensym","~$cljs.core/list","~$cljs.core/boolean","~:schema-name"]],"~:order",["^25","^2>","^2=","^21","^[","^26","^24","^2;","^E","^29","^22","^2<","^28","^23","^1Z","^27","^1X","^1[","^1W","^R","^1Y","^2:","^20"]],"^H","Compile time utility functions."]